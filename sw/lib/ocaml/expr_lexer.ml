# 23 "expr_lexer.mll"
 
open Expr_parser


# 7 "expr_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\218\255\219\255\018\000\225\255\229\255\002\000\002\000\
    \054\000\033\000\062\000\034\000\240\255\241\255\242\255\243\255\
    \244\255\245\255\246\255\247\255\248\255\249\255\089\000\094\000\
    \160\000\237\000\087\000\255\255\090\000\084\000\092\000\254\255\
    \247\000\096\000\250\255\239\255\071\000\236\000\054\000\074\000\
    \084\000\072\000\087\000\087\000\238\255\090\000\235\255\233\255\
    \104\000\231\255\227\255\105\000\230\255\226\255\237\255\236\255\
    \234\255\228\255\222\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\034\000\255\255\255\255\023\000\255\255\
    \255\255\031\000\255\255\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\002\000\035\000\255\255\255\255\255\255\001\000\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\255\255\
    \255\255\255\255\255\255\000\000\028\000\028\000\028\000\000\000\
    \255\255\033\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\002\000\000\000\000\000\024\000\005\000\008\000\022\000\
    \017\000\016\000\003\000\004\000\021\000\011\000\020\000\026\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\018\000\019\000\058\000\009\000\006\000\057\000\
    \010\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\013\000\055\000\012\000\054\000\023\000\
    \035\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\015\000\007\000\014\000\056\000\039\000\
    \255\255\028\000\040\000\031\000\029\000\037\000\029\000\034\000\
    \047\000\030\000\036\000\030\000\051\000\038\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \045\000\041\000\042\000\052\000\043\000\044\000\046\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\050\000\053\000\000\000\000\000\023\000\000\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
    \001\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\032\000\000\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\000\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\009\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\010\000\
    \022\000\026\000\010\000\029\000\028\000\010\000\030\000\033\000\
    \038\000\028\000\010\000\030\000\036\000\010\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \039\000\040\000\041\000\036\000\042\000\043\000\045\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\048\000\051\000\255\255\255\255\023\000\255\255\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\255\255\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\037\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \037\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\029\000\255\255\255\255\255\255\
    \255\255\022\000\028\000\255\255\030\000\255\255\255\255\255\255\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 28 "expr_lexer.mll"
                    ( token lexbuf)
# 187 "expr_lexer.ml"

  | 1 ->
# 29 "expr_lexer.mll"
                                   ( token lexbuf)
# 192 "expr_lexer.ml"

  | 2 ->
# 30 "expr_lexer.mll"
               ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 197 "expr_lexer.ml"

  | 3 ->
# 31 "expr_lexer.mll"
                            ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 202 "expr_lexer.ml"

  | 4 ->
# 32 "expr_lexer.mll"
                                                               ( IDENT (Lexing.lexeme lexbuf) )
# 207 "expr_lexer.ml"

  | 5 ->
# 33 "expr_lexer.mll"
                     ( let s = Lexing.lexeme lexbuf in IDENT (String.sub s 1 (String.length s - 2)) )
# 212 "expr_lexer.ml"

  | 6 ->
# 34 "expr_lexer.mll"
        ( COMMA )
# 217 "expr_lexer.ml"

  | 7 ->
# 35 "expr_lexer.mll"
        ( DOT )
# 222 "expr_lexer.ml"

  | 8 ->
# 36 "expr_lexer.mll"
        ( SEMICOLON )
# 227 "expr_lexer.ml"

  | 9 ->
# 37 "expr_lexer.mll"
        ( COLON )
# 232 "expr_lexer.ml"

  | 10 ->
# 38 "expr_lexer.mll"
        ( LP )
# 237 "expr_lexer.ml"

  | 11 ->
# 39 "expr_lexer.mll"
        ( RP )
# 242 "expr_lexer.ml"

  | 12 ->
# 40 "expr_lexer.mll"
        ( LC )
# 247 "expr_lexer.ml"

  | 13 ->
# 41 "expr_lexer.mll"
        ( RC )
# 252 "expr_lexer.ml"

  | 14 ->
# 42 "expr_lexer.mll"
        ( LB )
# 257 "expr_lexer.ml"

  | 15 ->
# 43 "expr_lexer.mll"
        ( RB )
# 262 "expr_lexer.ml"

  | 16 ->
# 44 "expr_lexer.mll"
         ( DEREF )
# 267 "expr_lexer.ml"

  | 17 ->
# 45 "expr_lexer.mll"
             (DEREF)
# 272 "expr_lexer.ml"

  | 18 ->
# 46 "expr_lexer.mll"
         ( EQ )
# 277 "expr_lexer.ml"

  | 19 ->
# 47 "expr_lexer.mll"
         ( AND )
# 282 "expr_lexer.ml"

  | 20 ->
# 48 "expr_lexer.mll"
           ( AND )
# 287 "expr_lexer.ml"

  | 21 ->
# 49 "expr_lexer.mll"
         ( OR )
# 292 "expr_lexer.ml"

  | 22 ->
# 50 "expr_lexer.mll"
          ( OR )
# 297 "expr_lexer.ml"

  | 23 ->
# 51 "expr_lexer.mll"
        ( GT )
# 302 "expr_lexer.ml"

  | 24 ->
# 52 "expr_lexer.mll"
          ( GT )
# 307 "expr_lexer.ml"

  | 25 ->
# 53 "expr_lexer.mll"
          ( LT )
# 312 "expr_lexer.ml"

  | 26 ->
# 54 "expr_lexer.mll"
        ( MOD )
# 317 "expr_lexer.ml"

  | 27 ->
# 55 "expr_lexer.mll"
         ( GEQ )
# 322 "expr_lexer.ml"

  | 28 ->
# 56 "expr_lexer.mll"
           ( GEQ )
# 327 "expr_lexer.ml"

  | 29 ->
# 57 "expr_lexer.mll"
           ( LEQ )
# 332 "expr_lexer.ml"

  | 30 ->
# 58 "expr_lexer.mll"
        ( PLUS )
# 337 "expr_lexer.ml"

  | 31 ->
# 59 "expr_lexer.mll"
        ( ASSIGN )
# 342 "expr_lexer.ml"

  | 32 ->
# 60 "expr_lexer.mll"
        ( MINUS )
# 347 "expr_lexer.ml"

  | 33 ->
# 61 "expr_lexer.mll"
         ( EXPO )
# 352 "expr_lexer.ml"

  | 34 ->
# 62 "expr_lexer.mll"
        ( MULT )
# 357 "expr_lexer.ml"

  | 35 ->
# 63 "expr_lexer.mll"
        ( DIV )
# 362 "expr_lexer.ml"

  | 36 ->
# 64 "expr_lexer.mll"
        ( NOT )
# 367 "expr_lexer.ml"

  | 37 ->
# 65 "expr_lexer.mll"
        ( EOF )
# 372 "expr_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 67 "expr_lexer.mll"
 
  let parse = fun s ->
    let lexbuf = Lexing.from_string s in
    try
      Expr_parser.expression token lexbuf
    with
      Failure _ ->
	Printf.fprintf stderr "Lexing error in '%s': unexpected char: '%c' \n"
	  s (Lexing.lexeme_char lexbuf 0);
	exit 1
    | Parsing.Parse_error ->
	Printf.fprintf stderr "Parsing error in '%s', token '%s' ?\n"
	  s (Lexing.lexeme lexbuf);
	exit 1

# 395 "expr_lexer.ml"
