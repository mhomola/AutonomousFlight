/* This file has been generated by gen_flight_plan from /home/npsd/paparazzi/conf/flight_plans/tudelft/course_orangeavoid_cyberzoo_guided.xml */
/* Version v6.1.0_stable-0-g3508db681 */
/* Please DO NOT EDIT */

#ifndef FLIGHT_PLAN_H
#define FLIGHT_PLAN_H

#include "std.h"
#include "generated/modules.h"
#include "modules/core/abi.h"
#include "autopilot.h"


    #include "modules/datalink/datalink.h"
    #include "modules/energy/electrical.h"
    #include "modules/radio_control/radio_control.h"
    #include "modules/ahrs/ahrs.h"
    #define NPS_GAZEBO_WORLD "cyberzoo_orange_poles.world"
#include "autopilot.h"
inline void setNav(void){
  autopilot_mode_auto2 = AP_MODE_NAV;
  autopilot_static_set_mode(AP_MODE_NAV);
}
inline void setGuided(void){
  autopilot_mode_auto2 = AP_MODE_GUIDED;
  autopilot_static_set_mode(AP_MODE_GUIDED);
}

#define FLIGHT_PLAN_NAME "Bebop avoid orange TU Delft Cyberzoo"
#define NAV_DEFAULT_ALT 1 /* nominal altitude of the flight plan */
#define NAV_UTM_EAST0 594535
#define NAV_UTM_NORTH0 5760891
#define NAV_UTM_ZONE0 31
#define NAV_LAT0 519906340 /* 1e7deg */
#define NAV_LON0 43767889 /* 1e7deg */
#define NAV_ALT0 0 /* mm above msl */
#define NAV_MSL0 45110 /* mm, EGM96 geoid-height (msl) over ellipsoid */
#define QFU 0.0
#define WP_dummy 0
#define WP_HOME 1
#define WP_CLIMB 2
#define WP_STDBY 3
#define WP_TD 4
#define WP_GOAL 5
#define WP_TRAJECTORY 6
#define WP__CZ1 7
#define WP__CZ2 8
#define WP__CZ3 9
#define WP__CZ4 10
#define WP__OZ1 11
#define WP__OZ2 12
#define WP__OZ3 13
#define WP__OZ4 14
#define WAYPOINTS_UTM { \
 {0.0, 0.0, 1.0},\
 {0.5, -0.3, 1.0},\
 {1.9, 1.0, 1.0},\
 {1.9, 1.0, 1.0},\
 {0.8, -1.7, 1.0},\
 {1.9, 1.0, 1.0},\
 {1.9, 1.0, 1.0},\
 {-1.1, -5.7, 1.0},\
 {-5.7, 1.0, 1.0},\
 {1.2, 5.8, 1.0},\
 {5.8, -1.0, 1.0},\
 {-0.6, -4.3, 1.0},\
 {-3.8, 0.6, 1.0},\
 {1.0, 3.7, 1.0},\
 {4.2, -1.1, 1.0},\
};
#define WAYPOINTS_ENU { \
 {-0.00, -0.00, 1.00}, /* ENU in meters  */ \
 {0.48, -0.33, 1.00}, /* ENU in meters  */ \
 {1.92, 0.96, 1.00}, /* ENU in meters  */ \
 {1.92, 0.96, 1.00}, /* ENU in meters  */ \
 {0.77, -1.72, 1.00}, /* ENU in meters  */ \
 {1.92, 0.96, 1.00}, /* ENU in meters  */ \
 {1.92, 0.96, 1.00}, /* ENU in meters  */ \
 {-1.24, -5.63, 1.00}, /* ENU in meters  */ \
 {-5.70, 1.11, 1.00}, /* ENU in meters  */ \
 {1.31, 5.79, 1.00}, /* ENU in meters  */ \
 {5.76, -1.14, 1.00}, /* ENU in meters  */ \
 {-0.68, -4.34, 1.00}, /* ENU in meters  */ \
 {-3.78, 0.67, 1.00}, /* ENU in meters  */ \
 {1.03, 3.67, 1.00}, /* ENU in meters  */ \
 {4.19, -1.22, 1.00}, /* ENU in meters  */ \
};
#define WAYPOINTS_LLA { \
 {.lat=519906339, .lon=43767889, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906310, .lon=43767960, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906426, .lon=43768169, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906426, .lon=43768169, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906185, .lon=43768001, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906426, .lon=43768169, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906426, .lon=43768169, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519905834, .lon=43767709, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906439, .lon=43767059, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906860, .lon=43768080, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906237, .lon=43768728, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519905950, .lon=43767790, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906400, .lon=43767339, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906670, .lon=43768039, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
 {.lat=519906230, .lon=43768499, .alt=1000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=45.11m) */ \
};
#define WAYPOINTS_LLA_WGS84 { \
 {.lat=519906339, .lon=43767889, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906310, .lon=43767960, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906426, .lon=43768169, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906426, .lon=43768169, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906185, .lon=43768001, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906426, .lon=43768169, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906426, .lon=43768169, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519905834, .lon=43767709, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906439, .lon=43767059, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906860, .lon=43768080, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906237, .lon=43768728, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519905950, .lon=43767790, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906400, .lon=43767339, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906670, .lon=43768039, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=519906230, .lon=43768499, .alt=46110}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
};
#define WAYPOINTS_GLOBAL { \
 FALSE, \
 TRUE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 TRUE, \
 TRUE, \
 TRUE, \
 TRUE, \
 TRUE, \
 TRUE, \
 TRUE, \
 TRUE, \
};
#define NB_WAYPOINT 15
#define FP_BLOCKS { \
 "Wait GPS" , \
 "Geo init" , \
 "Holding point" , \
 "Start Engine" , \
 "Takeoff" , \
 "Standby" , \
 "START" , \
 "STOP" , \
 "land here" , \
 "Land" , \
 "Flare" , \
 "Landed" , \
 "HOME" , \
}
#define NB_BLOCK 13
#define GROUND_ALT 0.
#define GROUND_ALT_CM 0
#define SECURITY_HEIGHT 0.4
#define SECURITY_ALT 0.4
#define HOME_MODE_HEIGHT 0.4
#define MAX_DIST_FROM_HOME 60.

#define SECTOR_CYBERZOO_NB 4
#define SECTOR_CYBERZOO { 7, 8, 9, 10 }
static inline bool InsideCyberZoo(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = SECTOR_CYBERZOO_NB;
  const uint8_t wps_id[] = SECTOR_CYBERZOO;

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}

#define SECTOR_OBSTACLEZONE_NB 4
#define SECTOR_OBSTACLEZONE { 11, 12, 13, 14 }
static inline bool InsideObstacleZone(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = SECTOR_OBSTACLEZONE_NB;
  const uint8_t wps_id[] = SECTOR_OBSTACLEZONE;

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}


#ifdef NAV_C


static inline void auto_nav_init(void) {
}

static inline void auto_nav(void) {
  if ((nav_block != 8) && ((((datalink_time>5)&&!((2>nav_block)))&&!((nav_block>=8)))&&(autopilot_in_flight()==true))) { GotoBlock(8); return; }
  if ((nav_block != 8) && (((!(InsideCyberZoo(GetPosX(),GetPosY()))&&!((2>nav_block)))&&!((nav_block>=8)))&&(autopilot_in_flight()==true))) { GotoBlock(8); return; }
  if ((nav_block != 8) && ((((GetPosAlt()>3.500000)&&!((2>nav_block)))&&!((nav_block>=8)))&&(autopilot_in_flight()==true))) { GotoBlock(8); return; }
  if ((nav_block != 11) && (((GetPosAlt()>4.500000)&&!((2>nav_block)))&&(autopilot_in_flight()==true))) { GotoBlock(11); return; }
  if ((nav_block != 8) && (((electrical.bat_low&&!((2>nav_block)))&&!((nav_block>=8)))&&(autopilot_in_flight()==true))) { GotoBlock(8); return; }
  if ((nav_block != 8) && (((electrical.bat_critical&&!((2>nav_block)))&&!((nav_block>=8)))&&(autopilot_in_flight()==true))) { GotoBlock(8); return; }
  switch (nav_block) {
    Block(0) // Wait GPS
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Label(while_1)
      Stage(1)
        if (! (!(GpsFixValid()))) Goto(endwhile_2) else NextStageAndBreak();
        Stage(2)
          Goto(while_1)
        Label(endwhile_2)
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(1) // Geo init
    switch(nav_stage) {
      Label(while_3)
      Stage(0)
        if (! (LessThan(NavBlockTime(),2))) Goto(endwhile_4) else NextStageAndBreak();
        Stage(1)
          Goto(while_3)
        Label(endwhile_4)
      Stage(2)
        NavSetAltitudeReferenceHere();
        NextStage();
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(2) // Holding point
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(3) // Start Engine
    switch(nav_stage) {
      Stage(0)
        NavResurrect();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      Stage(2)
        NavResurrect();
        NextStage();
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(4) // Takeoff
    if ((nav_block != 5) && (GetPosAlt()>0.800000)) { GotoBlock(5); return; }
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_CLIMB);
        NextStage();
      Stage(1)
        NavGotoWaypoint(2);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav_climb_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(5) // Standby
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_STDBY);
        NextStage();
      Stage(1)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(6) // START
    switch(nav_stage) {
      Stage(0)
        setGuided();
        NextStage();
      Stage(1)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(7) // STOP
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_STDBY);
        NextStage();
      Stage(1)
        setNav();
        NextStage();
      Stage(2)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        break;
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(8) // land here
    switch(nav_stage) {
      Stage(0)
        setNav();
        NextStage();
      Stage(1)
        NavSetWaypointHere(WP_TD);
        NextStage();
      Stage(2)
        if (NavApproaching(4,CARROT)) {
          NextStageAndBreakFrom(4);
        } else {
          NavGotoWaypoint(4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        }
        break;
      Stage(3)
        GotoBlock(10);
        break;
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(9) // Land
    switch(nav_stage) {
      Stage(0)
        setNav();
        NextStage();
      Stage(1)
        if (NavApproaching(4,CARROT)) {
          NextStageAndBreakFrom(4);
        } else {
          NavGotoWaypoint(4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        }
        break;
      Stage(2)
        GotoBlock(10);
        break;
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(10) // Flare
    if ((nav_block != 2) && NavDetectGround()) { GotoBlock(2); return; }
    if ((nav_block != 11) && !(nav_is_in_flight())) { GotoBlock(11); return; }
    if ((nav_block != 11) && (0.100000>GetPosAlt())) { GotoBlock(11); return; }
    switch(nav_stage) {
      Stage(0)
        NavStartDetectGround();
        NextStage();
      Stage(1)
        NavGotoWaypoint(4);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav_descend_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(11) // Landed
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(12) // HOME
    switch(nav_stage) {
      Stage(0)
        nav_home();
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    default: break;
  }
}
#endif // NAV_C

#endif // FLIGHT_PLAN_H
