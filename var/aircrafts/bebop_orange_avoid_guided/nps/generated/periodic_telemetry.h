/* This file has been generated by gen_periodic */
/* Version v6.1.0_stable-0-g3508db681 */
/* Please DO NOT EDIT */

#ifndef _VAR_PERIODIC_H_
#define _VAR_PERIODIC_H_

#include "std.h"
#include "generated/airframe.h"
#include "modules/datalink/telemetry_common.h"

#ifndef TELEMETRY_FREQUENCY
#ifdef PERIODIC_FREQUENCY
#define TELEMETRY_FREQUENCY PERIODIC_FREQUENCY
#else
#error "neither TELEMETRY_FREQUENCY or PERIODIC_FREQUENCY are defined"
#endif
#endif

/* Periodic telemetry messages of type PPRZ */
#define TELEMETRY_PPRZ_MSG_GPS_RXMRTCM_IDX 0
#define TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX 1
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX 2
#define TELEMETRY_PPRZ_MSG_PPM_IDX 3
#define TELEMETRY_PPRZ_MSG_HYBRID_GUIDANCE_IDX 4
#define TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX 5
#define TELEMETRY_PPRZ_MSG_ENERGY_IDX 6
#define TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX 7
#define TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX 8
#define TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX 9
#define TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX 10
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX 11
#define TELEMETRY_PPRZ_MSG_BARO_RAW_IDX 12
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX 13
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX 14
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX 15
#define TELEMETRY_PPRZ_MSG_HFF_GPS_IDX 16
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX 17
#define TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX 18
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX 19
#define TELEMETRY_PPRZ_MSG_WP_MOVED_IDX 20
#define TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX 21
#define TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX 22
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX 23
#define TELEMETRY_PPRZ_MSG_GPS_INT_IDX 24
#define TELEMETRY_PPRZ_MSG_OPTICAL_FLOW_HOVER_IDX 25
#define TELEMETRY_PPRZ_MSG_LIDAR_IDX 26
#define TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX 27
#define TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX 28
#define TELEMETRY_PPRZ_MSG_INS_Z_IDX 29
#define TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX 30
#define TELEMETRY_PPRZ_MSG_DIVERGENCE_IDX 31
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX 32
#define TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX 33
#define TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX 34
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX 35
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX 36
#define TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX 37
#define TELEMETRY_PPRZ_MSG_HFF_IDX 38
#define TELEMETRY_PPRZ_MSG_GEO_MAG_IDX 39
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX 40
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX 41
#define TELEMETRY_PPRZ_MSG_AIR_DATA_IDX 42
#define TELEMETRY_PPRZ_MSG_VFF_IDX 43
#define TELEMETRY_PPRZ_MSG_INS_EKF2_IDX 44
#define TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX 45
#define TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX 46
#define TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX 47
#define TELEMETRY_PPRZ_MSG_INDI_G_IDX 48
#define TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX 49
#define TELEMETRY_PPRZ_MSG_INS_IDX 50
#define TELEMETRY_PPRZ_MSG_FILTER_IDX 51
#define TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX 52
#define TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX 53
#define TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX 54
#define TELEMETRY_PPRZ_MSG_RC_IDX 55
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX 56
#define TELEMETRY_PPRZ_MSG_HFF_DBG_IDX 57
#define TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX 58
#define TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX 59
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX 60
#define TELEMETRY_PPRZ_MSG_SURVEY_IDX 61
#define TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX 62
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX 63
#define TELEMETRY_PPRZ_MSG_ALIVE_IDX 64
#define TELEMETRY_PPRZ_MSG_DRAGSPEED_IDX 65
#define TELEMETRY_PPRZ_MSG_VISION_POSITION_ESTIMATE_IDX 66
#define TELEMETRY_PPRZ_MSG_VISUALTARGET_IDX 67
#define TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX 68
#define TELEMETRY_PPRZ_MSG_DL_VALUE_IDX 69
#define TELEMETRY_PPRZ_MSG_GPS_RTK_IDX 70
#define TELEMETRY_PPRZ_MSG_INS_REF_IDX 71
#define TELEMETRY_PPRZ_NB_MSG 72

#define TELEMETRY_PPRZ_MSG_NAMES { \
  "GPS_RXMRTCM", \
  "FILTER_ALIGNER", \
  "STAB_ATTITUDE_REF_INT", \
  "PPM", \
  "HYBRID_GUIDANCE", \
  "I2C_ERRORS", \
  "ENERGY", \
  "AHRS_EULER_INT", \
  "VERT_LOOP", \
  "STATE_FILTER_STATUS", \
  "UART_ERRORS", \
  "STAB_ATTITUDE_REF_FLOAT", \
  "BARO_RAW", \
  "ROTORCRAFT_CAM", \
  "ROTORCRAFT_NAV_STATUS", \
  "ROTORCRAFT_FP", \
  "HFF_GPS", \
  "STAB_ATTITUDE_FLOAT", \
  "AHRS_REF_QUAT", \
  "ROTORCRAFT_TUNE_HOVER", \
  "WP_MOVED", \
  "GUIDANCE_H_REF_INT", \
  "RATE_LOOP", \
  "IMU_GYRO_RAW", \
  "GPS_INT", \
  "OPTICAL_FLOW_HOVER", \
  "LIDAR", \
  "HOVER_LOOP", \
  "VECTORNAV_INFO", \
  "INS_Z", \
  "IMU_MAG_RAW", \
  "DIVERGENCE", \
  "STAB_ATTITUDE_INDI", \
  "AHRS_QUAT_INT", \
  "BEBOP_ACTUATORS", \
  "IMU_ACCEL_RAW", \
  "ROTORCRAFT_STATUS", \
  "GUIDANCE_H_INT", \
  "HFF", \
  "GEO_MAG", \
  "IMU_ACCEL_SCALED", \
  "ROTORCRAFT_RADIO_CONTROL", \
  "AIR_DATA", \
  "VFF", \
  "INS_EKF2", \
  "OPTIC_FLOW_EST", \
  "AHRS_EULER", \
  "AUTOPILOT_VERSION", \
  "INDI_G", \
  "LOGGER_STATUS", \
  "INS", \
  "FILTER", \
  "VFF_EXTENDED", \
  "IMU_MAG_SCALED", \
  "SUPERBITRF", \
  "RC", \
  "ROTORCRAFT_CMD", \
  "HFF_DBG", \
  "WIND_INFO_RET", \
  "ARDRONE_NAVDATA", \
  "STAB_ATTITUDE_INT", \
  "SURVEY", \
  "AHRS_GYRO_BIAS_INT", \
  "IMU_GYRO_SCALED", \
  "ALIVE", \
  "DRAGSPEED", \
  "VISION_POSITION_ESTIMATE", \
  "VISUALTARGET", \
  "DATALINK_REPORT", \
  "DL_VALUE", \
  "GPS_RTK", \
  "INS_REF", \
}

#define TELEMETRY_PPRZ_CBS { \
  {.id=PPRZ_MSG_ID_GPS_RXMRTCM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FILTER_ALIGNER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_REF_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HYBRID_GUIDANCE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_I2C_ERRORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ENERGY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_EULER_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VERT_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STATE_FILTER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_UART_ERRORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_REF_FLOAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BARO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_CAM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_FP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF_GPS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_REF_QUAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_TUNE_HOVER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WP_MOVED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GUIDANCE_H_REF_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RATE_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_OPTICAL_FLOW_HOVER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_LIDAR, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HOVER_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VECTORNAV_INFO, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS_Z, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DIVERGENCE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_INDI, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_QUAT_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BEBOP_ACTUATORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GUIDANCE_H_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GEO_MAG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIR_DATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VFF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS_EKF2, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_OPTIC_FLOW_EST, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_EULER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AUTOPILOT_VERSION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INDI_G, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_LOGGER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FILTER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VFF_EXTENDED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SUPERBITRF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_CMD, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF_DBG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WIND_INFO_RET, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ARDRONE_NAVDATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SURVEY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_GYRO_BIAS_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ALIVE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DRAGSPEED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VISION_POSITION_ESTIMATE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VISUALTARGET, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DATALINK_REPORT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DL_VALUE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS_RTK, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS_REF, .slots={ NULL }}, \
}


/* Number of processes in telemetry file */
#define TELEMETRY_PROCESS_NB 2

/* Periodic telemetry (type PPRZ): Main process */
#define TELEMETRY_PROCESS_Main 0
#define TELEMETRY_MODE_Main_default 0
#define PERIOD_AUTOPILOT_VERSION_Main_0 (11.1)
#define PERIOD_DL_VALUE_Main_0 (1.1)
#define PERIOD_ROTORCRAFT_STATUS_Main_0 (1.2)
#define PERIOD_ROTORCRAFT_FP_Main_0 (0.25)
#define PERIOD_ALIVE_Main_0 (2.1)
#define PERIOD_INS_REF_Main_0 (5.1)
#define PERIOD_ROTORCRAFT_NAV_STATUS_Main_0 (1.6)
#define PERIOD_WP_MOVED_Main_0 (1.3)
#define PERIOD_ROTORCRAFT_CAM_Main_0 (1.)
#define PERIOD_GPS_INT_Main_0 (.25)
#define PERIOD_INS_Main_0 (.25)
#define PERIOD_I2C_ERRORS_Main_0 (4.1)
#define PERIOD_UART_ERRORS_Main_0 (3.1)
#define PERIOD_SUPERBITRF_Main_0 (3)
#define PERIOD_ENERGY_Main_0 (2.5)
#define PERIOD_DATALINK_REPORT_Main_0 (5.1)
#define PERIOD_STATE_FILTER_STATUS_Main_0 (3.2)
#define PERIOD_AIR_DATA_Main_0 (1.3)
#define PERIOD_SURVEY_Main_0 (2.5)
#define PERIOD_OPTIC_FLOW_EST_Main_0 (0.05)
#define PERIOD_VECTORNAV_INFO_Main_0 (0.5)
#define PERIOD_OPTICAL_FLOW_HOVER_Main_0 (0.05)
#define PERIOD_VISUALTARGET_Main_0 (0.10)
#define PERIOD_VISION_POSITION_ESTIMATE_Main_0 (0.1)
#define PERIOD_DIVERGENCE_Main_0 (0.05)
#define PERIOD_DRAGSPEED_Main_0 (0.02)
#define PERIOD_LOGGER_STATUS_Main_0 (5.1)
#define PERIOD_LIDAR_Main_0 (1.2)
#define PERIOD_INS_EKF2_Main_0 (.25)
#define PERIOD_WIND_INFO_RET_Main_0 (1.)
#define TELEMETRY_MODE_Main_ppm 1
#define PERIOD_DL_VALUE_Main_1 (0.5)
#define PERIOD_ALIVE_Main_1 (2.1)
#define PERIOD_ROTORCRAFT_CMD_Main_1 (.05)
#define PERIOD_PPM_Main_1 (0.5)
#define PERIOD_RC_Main_1 (0.5)
#define PERIOD_ROTORCRAFT_RADIO_CONTROL_Main_1 (0.5)
#define PERIOD_ROTORCRAFT_STATUS_Main_1 (1)
#define PERIOD_BEBOP_ACTUATORS_Main_1 (0.2)
#define TELEMETRY_MODE_Main_raw_sensors 2
#define PERIOD_ROTORCRAFT_STATUS_Main_2 (1.2)
#define PERIOD_DL_VALUE_Main_2 (0.5)
#define PERIOD_ALIVE_Main_2 (2.1)
#define PERIOD_IMU_ACCEL_RAW_Main_2 (.05)
#define PERIOD_IMU_GYRO_RAW_Main_2 (.05)
#define PERIOD_IMU_MAG_RAW_Main_2 (.05)
#define PERIOD_BARO_RAW_Main_2 (.1)
#define PERIOD_ARDRONE_NAVDATA_Main_2 (.05)
#define TELEMETRY_MODE_Main_scaled_sensors 3
#define PERIOD_ROTORCRAFT_STATUS_Main_3 (1.2)
#define PERIOD_DL_VALUE_Main_3 (0.5)
#define PERIOD_ALIVE_Main_3 (2.1)
#define PERIOD_IMU_GYRO_SCALED_Main_3 (.075)
#define PERIOD_IMU_ACCEL_SCALED_Main_3 (.075)
#define PERIOD_IMU_MAG_SCALED_Main_3 (.1)
#define TELEMETRY_MODE_Main_ahrs 4
#define PERIOD_ROTORCRAFT_STATUS_Main_4 (1.2)
#define PERIOD_DL_VALUE_Main_4 (0.5)
#define PERIOD_ALIVE_Main_4 (2.1)
#define PERIOD_FILTER_ALIGNER_Main_4 (2.2)
#define PERIOD_FILTER_Main_4 (.5)
#define PERIOD_GEO_MAG_Main_4 (5.)
#define PERIOD_AHRS_GYRO_BIAS_INT_Main_4 (0.08)
#define PERIOD_AHRS_QUAT_INT_Main_4 (.25)
#define PERIOD_AHRS_EULER_INT_Main_4 (.1)
#define PERIOD_AHRS_EULER_Main_4 (.1)
#define TELEMETRY_MODE_Main_rate_loop 5
#define PERIOD_ROTORCRAFT_STATUS_Main_5 (1.2)
#define PERIOD_DL_VALUE_Main_5 (0.5)
#define PERIOD_ALIVE_Main_5 (2.1)
#define PERIOD_RATE_LOOP_Main_5 (.02)
#define TELEMETRY_MODE_Main_attitude_setpoint_viz 6
#define PERIOD_ROTORCRAFT_STATUS_Main_6 (1.2)
#define PERIOD_DL_VALUE_Main_6 (0.5)
#define PERIOD_ALIVE_Main_6 (0.9)
#define PERIOD_ROTORCRAFT_RADIO_CONTROL_Main_6 (0.1)
#define PERIOD_AHRS_REF_QUAT_Main_6 (0.05)
#define TELEMETRY_MODE_Main_attitude_loop 7
#define PERIOD_ROTORCRAFT_STATUS_Main_7 (1.2)
#define PERIOD_DL_VALUE_Main_7 (0.5)
#define PERIOD_ALIVE_Main_7 (0.9)
#define PERIOD_STAB_ATTITUDE_INT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_REF_INT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_FLOAT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_REF_FLOAT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_INDI_Main_7 (.25)
#define PERIOD_INDI_G_Main_7 (2.0)
#define TELEMETRY_MODE_Main_vert_loop 8
#define PERIOD_ROTORCRAFT_STATUS_Main_8 (1.2)
#define PERIOD_DL_VALUE_Main_8 (0.5)
#define PERIOD_ALIVE_Main_8 (0.9)
#define PERIOD_VFF_Main_8 (.05)
#define PERIOD_VFF_EXTENDED_Main_8 (.05)
#define PERIOD_VERT_LOOP_Main_8 (.05)
#define PERIOD_INS_Z_Main_8 (.05)
#define PERIOD_INS_Main_8 (.11)
#define PERIOD_INS_REF_Main_8 (5.1)
#define TELEMETRY_MODE_Main_vel_guidance 9
#define PERIOD_ALIVE_Main_9 (0.9)
#define PERIOD_HYBRID_GUIDANCE_Main_9 (0.062)
#define PERIOD_ROTORCRAFT_FP_Main_9 (0.8)
#define PERIOD_ROTORCRAFT_STATUS_Main_9 (1.2)
#define PERIOD_ROTORCRAFT_NAV_STATUS_Main_9 (1.6)
#define PERIOD_INS_REF_Main_9 (5.1)
#define PERIOD_WP_MOVED_Main_9 (1.3)
#define PERIOD_GPS_INT_Main_9 (1.0)
#define PERIOD_INS_Main_9 (1.0)
#define TELEMETRY_MODE_Main_h_loop 10
#define PERIOD_ALIVE_Main_10 (0.9)
#define PERIOD_HOVER_LOOP_Main_10 (0.062)
#define PERIOD_GUIDANCE_H_REF_INT_Main_10 (0.062)
#define PERIOD_STAB_ATTITUDE_INT_Main_10 (0.4)
#define PERIOD_STAB_ATTITUDE_FLOAT_Main_10 (0.4)
#define PERIOD_ROTORCRAFT_FP_Main_10 (0.8)
#define PERIOD_ROTORCRAFT_STATUS_Main_10 (1.2)
#define PERIOD_ROTORCRAFT_NAV_STATUS_Main_10 (1.6)
#define PERIOD_INS_REF_Main_10 (5.1)
#define PERIOD_HFF_Main_10 (.05)
#define PERIOD_HFF_GPS_Main_10 (.03)
#define PERIOD_HFF_DBG_Main_10 (.2)
#define TELEMETRY_MODE_Main_aligner 11
#define PERIOD_ALIVE_Main_11 (0.9)
#define PERIOD_FILTER_ALIGNER_Main_11 (0.02)
#define TELEMETRY_MODE_Main_tune_hover 12
#define PERIOD_DL_VALUE_Main_12 (1.1)
#define PERIOD_ROTORCRAFT_STATUS_Main_12 (1.2)
#define PERIOD_ALIVE_Main_12 (2.1)
#define PERIOD_GUIDANCE_H_INT_Main_12 (0.05)
#define PERIOD_ROTORCRAFT_TUNE_HOVER_Main_12 (.1)
#define PERIOD_INS_REF_Main_12 (5.1)
#define TELEMETRY_MODE_Main_RTCM3 13
#define PERIOD_GPS_RXMRTCM_Main_13 (1)
#define PERIOD_GPS_INT_Main_13 (.25)
#define PERIOD_GPS_RTK_Main_13 (1)

/* Functions for Main process */
#ifdef PERIODIC_C_MAIN
#ifndef TELEMETRY_MODE_MAIN
#define TELEMETRY_MODE_MAIN 0
#endif
uint8_t telemetry_mode_Main = TELEMETRY_MODE_MAIN;
#else /* PERIODIC_C_MAIN not defined (general header) */
extern uint8_t telemetry_mode_Main;
#endif /* PERIODIC_C_MAIN */
static inline void periodic_telemetry_send_Main(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_default) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*11.1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*1.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.25)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*1.6)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*1.3)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*1.)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*.25)) i10=0;
    static uint32_t i11 = 0; i11++; if (i11>= (uint32_t)(TELEMETRY_FREQUENCY*4.1)) i11=0;
    static uint32_t i12 = 0; i12++; if (i12>= (uint32_t)(TELEMETRY_FREQUENCY*3.1)) i12=0;
    static uint32_t i13 = 0; i13++; if (i13>= (uint32_t)(TELEMETRY_FREQUENCY*3)) i13=0;
    static uint32_t i14 = 0; i14++; if (i14>= (uint32_t)(TELEMETRY_FREQUENCY*2.5)) i14=0;
    static uint32_t i15 = 0; i15++; if (i15>= (uint32_t)(TELEMETRY_FREQUENCY*3.2)) i15=0;
    static uint32_t i16 = 0; i16++; if (i16>= (uint32_t)(TELEMETRY_FREQUENCY*0.05)) i16=0;
    static uint32_t i17 = 0; i17++; if (i17>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i17=0;
    static uint32_t i18 = 0; i18++; if (i18>= (uint32_t)(TELEMETRY_FREQUENCY*0.10)) i18=0;
    static uint32_t i19 = 0; i19++; if (i19>= (uint32_t)(TELEMETRY_FREQUENCY*0.1)) i19=0;
    static uint32_t i20 = 0; i20++; if (i20>= (uint32_t)(TELEMETRY_FREQUENCY*0.02)) i20=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_LOGGER_STATUS);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*4.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_I2C_ERRORS);
#endif
    }
    if (i15 == (uint32_t)(TELEMETRY_FREQUENCY*3.2*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i12 == (uint32_t)(TELEMETRY_FREQUENCY*3.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_UART_ERRORS);
#endif
    }
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*3*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_SUPERBITRF);
#endif
    }
    if (i14 == (uint32_t)(TELEMETRY_FREQUENCY*2.5*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_SURVEY);
#endif
    }
    if (i14 == (uint32_t)(TELEMETRY_FREQUENCY*2.5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*11.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AUTOPILOT_VERSION);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*1.6*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_LIDAR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_LIDAR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_LIDAR);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*1.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*1.*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_WIND_INFO_RET);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*1.*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_CAM);
#endif
    }
    if (i17 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VECTORNAV_INFO);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.25*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
    if (i18 == (uint32_t)(TELEMETRY_FREQUENCY*0.10*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VISUALTARGET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VISUALTARGET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VISUALTARGET);
#endif
    }
    if (i19 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VISION_POSITION_ESTIMATE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VISION_POSITION_ESTIMATE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VISION_POSITION_ESTIMATE);
#endif
    }
    if (i16 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DIVERGENCE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DIVERGENCE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DIVERGENCE);
#endif
    }
    if (i16 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTICAL_FLOW_HOVER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTICAL_FLOW_HOVER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_OPTICAL_FLOW_HOVER);
#endif
    }
    if (i16 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_OPTIC_FLOW_EST);
#endif
    }
    if (i20 == (uint32_t)(TELEMETRY_FREQUENCY*0.02*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DRAGSPEED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DRAGSPEED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DRAGSPEED);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_EKF2_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_EKF2_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_EKF2);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_INT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_ppm) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*.05)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*1)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*0.2)) i5=0;
    uint8_t j;
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*1*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_RC);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_PPM);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*0.2*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_BEBOP_ACTUATORS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_CMD);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_raw_sensors) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.05)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i5=0;
    uint8_t j;
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_BARO_RAW);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ARDRONE_NAVDATA);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_scaled_sensors) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.075)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i5=0;
    uint8_t j;
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_MAG_SCALED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_ACCEL_SCALED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_GYRO_SCALED);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_ahrs) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*2.2)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.5)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*0.08)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*.25)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i9=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GEO_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GEO_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GEO_MAG);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*2.2*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER_ALIGNER);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*0.08*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_GYRO_BIAS_INT);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_QUAT_INT);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_EULER);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_EULER_INT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_rate_loop) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.02)) i4=0;
    uint8_t j;
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.02*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_RATE_LOOP);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_attitude_setpoint_viz) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.1)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*0.05)) i5=0;
    uint8_t j;
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_REF_QUAT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_attitude_loop) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.03)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.25)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*2.0)) i6=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*2.0*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INDI_G_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INDI_G_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INDI_G);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INDI);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.03*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_REF_FLOAT);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.03*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.03*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_REF_INT);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.03*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_vert_loop) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.05)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.11)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i6=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.11*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_Z_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_Z_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_Z);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VERT_LOOP);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VFF_EXTENDED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VFF);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_vel_guidance) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.062)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.8)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*1.6)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*1.3)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*1.0)) i8=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.6*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_INT);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.8*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.062*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HYBRID_GUIDANCE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HYBRID_GUIDANCE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HYBRID_GUIDANCE);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_h_loop) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.062)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.4)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.8)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*1.6)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*.05)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*.03)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*.2)) i10=0;
    uint8_t j;
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*1.6*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.8*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.4*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.4*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INT);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.062*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GUIDANCE_H_REF_INT);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.062*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HOVER_LOOP);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*.2*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_DBG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_DBG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF_DBG);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*.03*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF_GPS);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_aligner) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.02)) i2=0;
    uint8_t j;
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.02*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER_ALIGNER);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_tune_hover) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1.1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.05)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i6=0;
    uint8_t j;
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GUIDANCE_H_INT);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_TUNE_HOVER);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_RTCM3) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*.25)) i2=0;
    uint8_t j;
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_RTK_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_RTK_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_RTK);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_RXMRTCM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_RXMRTCM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_RXMRTCM);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*.25*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_INT);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): FlightRecorder process */
#define TELEMETRY_PROCESS_FlightRecorder 1
#define TELEMETRY_MODE_FlightRecorder_default 0
#define PERIOD_AUTOPILOT_VERSION_FlightRecorder_0 (11.1)
#define PERIOD_DL_VALUE_FlightRecorder_0 (1.1)
#define PERIOD_ROTORCRAFT_STATUS_FlightRecorder_0 (1.2)
#define PERIOD_ROTORCRAFT_FP_FlightRecorder_0 (0.25)
#define PERIOD_INS_REF_FlightRecorder_0 (5.1)
#define PERIOD_ROTORCRAFT_NAV_STATUS_FlightRecorder_0 (1.6)
#define PERIOD_WP_MOVED_FlightRecorder_0 (1.3)
#define PERIOD_GPS_INT_FlightRecorder_0 (.1)
#define PERIOD_INS_FlightRecorder_0 (.1)
#define PERIOD_I2C_ERRORS_FlightRecorder_0 (4.1)
#define PERIOD_UART_ERRORS_FlightRecorder_0 (3.1)
#define PERIOD_ENERGY_FlightRecorder_0 (2.5)
#define PERIOD_DATALINK_REPORT_FlightRecorder_0 (5.1)
#define PERIOD_STATE_FILTER_STATUS_FlightRecorder_0 (3.2)
#define PERIOD_AIR_DATA_FlightRecorder_0 (1.3)
#define PERIOD_SURVEY_FlightRecorder_0 (2.5)
#define PERIOD_IMU_GYRO_SCALED_FlightRecorder_0 (.075)
#define PERIOD_IMU_ACCEL_SCALED_FlightRecorder_0 (.075)
#define PERIOD_IMU_MAG_SCALED_FlightRecorder_0 (.2)
#define PERIOD_LIDAR_FlightRecorder_0 (0.05)

/* Functions for FlightRecorder process */
#ifdef PERIODIC_C_FLIGHTRECORDER
#ifndef TELEMETRY_MODE_FLIGHTRECORDER
#define TELEMETRY_MODE_FLIGHTRECORDER 0
#endif
uint8_t telemetry_mode_FlightRecorder = TELEMETRY_MODE_FLIGHTRECORDER;
#else /* PERIODIC_C_FLIGHTRECORDER not defined (general header) */
extern uint8_t telemetry_mode_FlightRecorder;
#endif /* PERIODIC_C_FLIGHTRECORDER */
static inline void periodic_telemetry_send_FlightRecorder(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {
  if (telemetry_mode_FlightRecorder == TELEMETRY_MODE_FlightRecorder_default) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*11.1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*1.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.25)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*1.6)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*1.3)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*4.1)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*3.1)) i10=0;
    static uint32_t i11 = 0; i11++; if (i11>= (uint32_t)(TELEMETRY_FREQUENCY*2.5)) i11=0;
    static uint32_t i12 = 0; i12++; if (i12>= (uint32_t)(TELEMETRY_FREQUENCY*3.2)) i12=0;
    static uint32_t i13 = 0; i13++; if (i13>= (uint32_t)(TELEMETRY_FREQUENCY*.075)) i13=0;
    static uint32_t i14 = 0; i14++; if (i14>= (uint32_t)(TELEMETRY_FREQUENCY*.2)) i14=0;
    static uint32_t i15 = 0; i15++; if (i15>= (uint32_t)(TELEMETRY_FREQUENCY*0.05)) i15=0;
    uint8_t j;
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*4.1*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_I2C_ERRORS);
#endif
    }
    if (i12 == (uint32_t)(TELEMETRY_FREQUENCY*3.2*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*3.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_UART_ERRORS);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*2.5*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_SURVEY);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*2.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*11.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AUTOPILOT_VERSION);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*1.6*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*1.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.25*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
    if (i15 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_LIDAR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_LIDAR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_LIDAR);
#endif
    }
    if (i14 == (uint32_t)(TELEMETRY_FREQUENCY*.2*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_MAG_SCALED);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_INS);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_GPS_INT);
#endif
    }
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_ACCEL_SCALED);
#endif
    }
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_GYRO_SCALED);
#endif
    }
  }
}
#endif // _VAR_PERIODIC_H_
