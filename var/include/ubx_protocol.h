/* Generated by gen_ubx from /home/npsd/paparazzi/conf/ubx.xml */
/* Please DO NOT EDIT */

#include "pprzlink/pprzlink_device.h"

#include "modules/gps/gps_ubx.h"

#define UBX_SYNC1 0xB5
#define UBX_SYNC2 0x62

#define UBX_NAV_ID 0x01

#define UBX_NAV_POSECEF_ID 0x01
#define UBX_NAV_POSECEF_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSECEF_ecefX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSECEF_ecefY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSECEF_ecefZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSECEF_pAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+16)|(uint32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16))<<24)

static inline void UbxSend_NAV_POSECEF(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_ecefx, int32_t ubx_ecefy, int32_t ubx_ecefz, uint32_t ubx_pacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSECEF_ID, 20);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _ecefx = ubx_ecefx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefx);
  int32_t _ecefy = ubx_ecefy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefy);
  int32_t _ecefz = ubx_ecefz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefz);
  uint32_t _pacc = ubx_pacc; ubx_send_bytes(dev, 4, (uint8_t*)&_pacc);
  ubx_trailer(dev);
}

#define UBX_NAV_POSLLH_ID 0x02
#define UBX_NAV_POSLLH_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSLLH_lon(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSLLH_lat(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSLLH_height(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSLLH_hMSL(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_POSLLH_hAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|(uint32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_POSLLH_vAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|(uint32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)

static inline void UbxSend_NAV_POSLLH(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_lon, int32_t ubx_lat, int32_t ubx_height, int32_t ubx_hmsl, uint32_t ubx_hacc, uint32_t ubx_vacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSLLH_ID, 28);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _lon = ubx_lon; ubx_send_bytes(dev, 4, (uint8_t*)&_lon);
  int32_t _lat = ubx_lat; ubx_send_bytes(dev, 4, (uint8_t*)&_lat);
  int32_t _height = ubx_height; ubx_send_bytes(dev, 4, (uint8_t*)&_height);
  int32_t _hmsl = ubx_hmsl; ubx_send_bytes(dev, 4, (uint8_t*)&_hmsl);
  uint32_t _hacc = ubx_hacc; ubx_send_bytes(dev, 4, (uint8_t*)&_hacc);
  uint32_t _vacc = ubx_vacc; ubx_send_bytes(dev, 4, (uint8_t*)&_vacc);
  ubx_trailer(dev);
}

#define UBX_NAV_STATUS_ID 0x03
#define UBX_NAV_STATUS_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_STATUS_gpsFix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_STATUS_flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_STATUS_fixStat(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_NAV_STATUS_flags2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_NAV_STATUS_ttff(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_STATUS_msss(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+12)|(uint32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+12))<<24)

static inline void UbxSend_NAV_STATUS(struct link_device *dev, uint32_t ubx_itow, uint8_t ubx_gpsfix, uint8_t ubx_flags, uint8_t ubx_fixstat, uint8_t ubx_flags2, uint32_t ubx_ttff, uint32_t ubx_msss) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_STATUS_ID, 16);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _gpsfix = ubx_gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  uint8_t _fixstat = ubx_fixstat; ubx_send_bytes(dev, 1, (uint8_t*)&_fixstat);
  uint8_t _flags2 = ubx_flags2; ubx_send_bytes(dev, 1, (uint8_t*)&_flags2);
  uint32_t _ttff = ubx_ttff; ubx_send_bytes(dev, 4, (uint8_t*)&_ttff);
  uint32_t _msss = ubx_msss; ubx_send_bytes(dev, 4, (uint8_t*)&_msss);
  ubx_trailer(dev);
}

#define UBX_NAV_DOP_ID 0x04
#define UBX_NAV_DOP_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_DOP_gDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|(uint16_t)(*((uint8_t*)_ubx_payload+1+4))<<8)
#define UBX_NAV_DOP_pDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|(uint16_t)(*((uint8_t*)_ubx_payload+1+6))<<8)
#define UBX_NAV_DOP_tDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+8)|(uint16_t)(*((uint8_t*)_ubx_payload+1+8))<<8)
#define UBX_NAV_DOP_vDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|(uint16_t)(*((uint8_t*)_ubx_payload+1+10))<<8)
#define UBX_NAV_DOP_hDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|(uint16_t)(*((uint8_t*)_ubx_payload+1+12))<<8)
#define UBX_NAV_DOP_nDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|(uint16_t)(*((uint8_t*)_ubx_payload+1+14))<<8)
#define UBX_NAV_DOP_eDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|(uint16_t)(*((uint8_t*)_ubx_payload+1+16))<<8)

static inline void UbxSend_NAV_DOP(struct link_device *dev, uint32_t ubx_itow, uint16_t ubx_gdop, uint16_t ubx_pdop, uint16_t ubx_tdop, uint16_t ubx_vdop, uint16_t ubx_hdop, uint16_t ubx_ndop, uint16_t ubx_edop) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_DOP_ID, 18);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint16_t _gdop = ubx_gdop; ubx_send_bytes(dev, 2, (uint8_t*)&_gdop);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _vdop = ubx_vdop; ubx_send_bytes(dev, 2, (uint8_t*)&_vdop);
  uint16_t _hdop = ubx_hdop; ubx_send_bytes(dev, 2, (uint8_t*)&_hdop);
  uint16_t _ndop = ubx_ndop; ubx_send_bytes(dev, 2, (uint8_t*)&_ndop);
  uint16_t _edop = ubx_edop; ubx_send_bytes(dev, 2, (uint8_t*)&_edop);
  ubx_trailer(dev);
}

#define UBX_NAV_SOL_ID 0x06
#define UBX_NAV_SOL_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SOL_fTOW(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_SOL_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+8)|(int16_t)(*((uint8_t*)_ubx_payload+1+8))<<8)
#define UBX_NAV_SOL_gpsFix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+10))
#define UBX_NAV_SOL_flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+11))
#define UBX_NAV_SOL_ecefX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_SOL_ecefY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_SOL_ecefZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|(int32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_SOL_pAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|(uint32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_SOL_ecefVX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+28)|(int32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_SOL_ecefVY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+32)|(int32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_NAV_SOL_ecefVZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+36)|(int32_t)(*((uint8_t*)_ubx_payload+1+36))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+36))<<24)
#define UBX_NAV_SOL_sAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+40)|(uint32_t)(*((uint8_t*)_ubx_payload+1+40))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+40))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+40))<<24)
#define UBX_NAV_SOL_pDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+44)|(uint16_t)(*((uint8_t*)_ubx_payload+1+44))<<8)
#define UBX_NAV_SOL_reserved1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+46))
#define UBX_NAV_SOL_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+47))
#define UBX_NAV_SOL_reserved2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+48)|(uint32_t)(*((uint8_t*)_ubx_payload+1+48))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+48))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+48))<<24)

static inline void UbxSend_NAV_SOL(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_ftow, int16_t ubx_week, uint8_t ubx_gpsfix, uint8_t ubx_flags, int32_t ubx_ecefx, int32_t ubx_ecefy, int32_t ubx_ecefz, uint32_t ubx_pacc, int32_t ubx_ecefvx, int32_t ubx_ecefvy, int32_t ubx_ecefvz, uint32_t ubx_sacc, uint16_t ubx_pdop, uint8_t ubx_reserved1, uint8_t ubx_numsv, uint32_t ubx_reserved2) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SOL_ID, 52);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _ftow = ubx_ftow; ubx_send_bytes(dev, 4, (uint8_t*)&_ftow);
  int16_t _week = ubx_week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _gpsfix = ubx_gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int32_t _ecefx = ubx_ecefx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefx);
  int32_t _ecefy = ubx_ecefy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefy);
  int32_t _ecefz = ubx_ecefz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefz);
  uint32_t _pacc = ubx_pacc; ubx_send_bytes(dev, 4, (uint8_t*)&_pacc);
  int32_t _ecefvx = ubx_ecefvx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvx);
  int32_t _ecefvy = ubx_ecefvy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvy);
  int32_t _ecefvz = ubx_ecefvz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvz);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint8_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved1);
  uint8_t _numsv = ubx_numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint32_t _reserved2 = ubx_reserved2; ubx_send_bytes(dev, 4, (uint8_t*)&_reserved2);
  ubx_trailer(dev);
}

#define UBX_NAV_PVT_ID 0x07
#define UBX_NAV_PVT_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_PVT_year(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|(uint16_t)(*((uint8_t*)_ubx_payload+1+4))<<8)
#define UBX_NAV_PVT_month(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_NAV_PVT_day(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_NAV_PVT_hour(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+8))
#define UBX_NAV_PVT_min(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+9))
#define UBX_NAV_PVT_sec(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+10))
#define UBX_NAV_PVT_valid(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+11))
#define UBX_NAV_PVT_tAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+12)|(uint32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_PVT_nano(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_PVT_fixType(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+20))
#define UBX_NAV_PVT_flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+21))
#define UBX_NAV_PVT_flags2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+22))
#define UBX_NAV_PVT_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+23))
#define UBX_NAV_PVT_lon(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+24)|(int32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_PVT_lat(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+28)|(int32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_PVT_height(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+32)|(int32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_NAV_PVT_hMSL(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+36)|(int32_t)(*((uint8_t*)_ubx_payload+1+36))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+36))<<24)
#define UBX_NAV_PVT_hAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+40)|(uint32_t)(*((uint8_t*)_ubx_payload+1+40))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+40))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+40))<<24)
#define UBX_NAV_PVT_vAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+44)|(uint32_t)(*((uint8_t*)_ubx_payload+1+44))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+44))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+44))<<24)
#define UBX_NAV_PVT_velN(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+48)|(int32_t)(*((uint8_t*)_ubx_payload+1+48))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+48))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+48))<<24)
#define UBX_NAV_PVT_velE(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+52)|(int32_t)(*((uint8_t*)_ubx_payload+1+52))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+52))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+52))<<24)
#define UBX_NAV_PVT_velD(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+56)|(int32_t)(*((uint8_t*)_ubx_payload+1+56))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+56))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+56))<<24)
#define UBX_NAV_PVT_gSpeed(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+60)|(int32_t)(*((uint8_t*)_ubx_payload+1+60))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+60))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+60))<<24)
#define UBX_NAV_PVT_headMot(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+64)|(int32_t)(*((uint8_t*)_ubx_payload+1+64))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+64))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+64))<<24)
#define UBX_NAV_PVT_sAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+68)|(uint32_t)(*((uint8_t*)_ubx_payload+1+68))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+68))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+68))<<24)
#define UBX_NAV_PVT_headAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+72)|(uint32_t)(*((uint8_t*)_ubx_payload+1+72))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+72))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+72))<<24)
#define UBX_NAV_PVT_pDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+76)|(uint16_t)(*((uint8_t*)_ubx_payload+1+76))<<8)
#define UBX_NAV_PVT_reserved1a(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+78)|(uint32_t)(*((uint8_t*)_ubx_payload+1+78))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+78))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+78))<<24)
#define UBX_NAV_PVT_reserved1b(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+82)|(uint16_t)(*((uint8_t*)_ubx_payload+1+82))<<8)
#define UBX_NAV_PVT_headVeh(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+84)|(int32_t)(*((uint8_t*)_ubx_payload+1+84))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+84))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+84))<<24)
#define UBX_NAV_PVT_magDec(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+88)|(int16_t)(*((uint8_t*)_ubx_payload+1+88))<<8)
#define UBX_NAV_PVT_magAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+90)|(uint16_t)(*((uint8_t*)_ubx_payload+1+90))<<8)

static inline void UbxSend_NAV_PVT(struct link_device *dev, uint32_t ubx_itow, uint16_t ubx_year, uint8_t ubx_month, uint8_t ubx_day, uint8_t ubx_hour, uint8_t ubx_min, uint8_t ubx_sec, uint8_t ubx_valid, uint32_t ubx_tacc, int32_t ubx_nano, uint8_t ubx_fixtype, uint8_t ubx_flags, uint8_t ubx_flags2, uint8_t ubx_numsv, int32_t ubx_lon, int32_t ubx_lat, int32_t ubx_height, int32_t ubx_hmsl, uint32_t ubx_hacc, uint32_t ubx_vacc, int32_t ubx_veln, int32_t ubx_vele, int32_t ubx_veld, int32_t ubx_gspeed, int32_t ubx_headmot, uint32_t ubx_sacc, uint32_t ubx_headacc, uint16_t ubx_pdop, uint32_t ubx_reserved1a, uint16_t ubx_reserved1b, int32_t ubx_headveh, int16_t ubx_magdec, uint16_t ubx_magacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_PVT_ID, 92);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint16_t _year = ubx_year; ubx_send_bytes(dev, 2, (uint8_t*)&_year);
  uint8_t _month = ubx_month; ubx_send_bytes(dev, 1, (uint8_t*)&_month);
  uint8_t _day = ubx_day; ubx_send_bytes(dev, 1, (uint8_t*)&_day);
  uint8_t _hour = ubx_hour; ubx_send_bytes(dev, 1, (uint8_t*)&_hour);
  uint8_t _min = ubx_min; ubx_send_bytes(dev, 1, (uint8_t*)&_min);
  uint8_t _sec = ubx_sec; ubx_send_bytes(dev, 1, (uint8_t*)&_sec);
  uint8_t _valid = ubx_valid; ubx_send_bytes(dev, 1, (uint8_t*)&_valid);
  uint32_t _tacc = ubx_tacc; ubx_send_bytes(dev, 4, (uint8_t*)&_tacc);
  int32_t _nano = ubx_nano; ubx_send_bytes(dev, 4, (uint8_t*)&_nano);
  uint8_t _fixtype = ubx_fixtype; ubx_send_bytes(dev, 1, (uint8_t*)&_fixtype);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  uint8_t _flags2 = ubx_flags2; ubx_send_bytes(dev, 1, (uint8_t*)&_flags2);
  uint8_t _numsv = ubx_numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  int32_t _lon = ubx_lon; ubx_send_bytes(dev, 4, (uint8_t*)&_lon);
  int32_t _lat = ubx_lat; ubx_send_bytes(dev, 4, (uint8_t*)&_lat);
  int32_t _height = ubx_height; ubx_send_bytes(dev, 4, (uint8_t*)&_height);
  int32_t _hmsl = ubx_hmsl; ubx_send_bytes(dev, 4, (uint8_t*)&_hmsl);
  uint32_t _hacc = ubx_hacc; ubx_send_bytes(dev, 4, (uint8_t*)&_hacc);
  uint32_t _vacc = ubx_vacc; ubx_send_bytes(dev, 4, (uint8_t*)&_vacc);
  int32_t _veln = ubx_veln; ubx_send_bytes(dev, 4, (uint8_t*)&_veln);
  int32_t _vele = ubx_vele; ubx_send_bytes(dev, 4, (uint8_t*)&_vele);
  int32_t _veld = ubx_veld; ubx_send_bytes(dev, 4, (uint8_t*)&_veld);
  int32_t _gspeed = ubx_gspeed; ubx_send_bytes(dev, 4, (uint8_t*)&_gspeed);
  int32_t _headmot = ubx_headmot; ubx_send_bytes(dev, 4, (uint8_t*)&_headmot);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint32_t _headacc = ubx_headacc; ubx_send_bytes(dev, 4, (uint8_t*)&_headacc);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint32_t _reserved1a = ubx_reserved1a; ubx_send_bytes(dev, 4, (uint8_t*)&_reserved1a);
  uint16_t _reserved1b = ubx_reserved1b; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1b);
  int32_t _headveh = ubx_headveh; ubx_send_bytes(dev, 4, (uint8_t*)&_headveh);
  int16_t _magdec = ubx_magdec; ubx_send_bytes(dev, 2, (uint8_t*)&_magdec);
  uint16_t _magacc = ubx_magacc; ubx_send_bytes(dev, 2, (uint8_t*)&_magacc);
  ubx_trailer(dev);
}

#define UBX_NAV_POSUTM_ID 0x08
#define UBX_NAV_POSUTM_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSUTM_east(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSUTM_north(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSUTM_alt(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSUTM_zone(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+16))
#define UBX_NAV_POSUTM_hem(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+17))

static inline void UbxSend_NAV_POSUTM(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_east, int32_t ubx_north, int32_t ubx_alt, int8_t ubx_zone, int8_t ubx_hem) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSUTM_ID, 18);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _east = ubx_east; ubx_send_bytes(dev, 4, (uint8_t*)&_east);
  int32_t _north = ubx_north; ubx_send_bytes(dev, 4, (uint8_t*)&_north);
  int32_t _alt = ubx_alt; ubx_send_bytes(dev, 4, (uint8_t*)&_alt);
  int8_t _zone = ubx_zone; ubx_send_bytes(dev, 1, (uint8_t*)&_zone);
  int8_t _hem = ubx_hem; ubx_send_bytes(dev, 1, (uint8_t*)&_hem);
  ubx_trailer(dev);
}

#define UBX_NAV_VELECEF_ID 0x11
#define UBX_NAV_VELECEF_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_VELECEF_ecefVX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_VELECEF_ecefVY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_VELECEF_ecefVZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_VELECEF_sAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+16)|(uint32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16))<<24)

static inline void UbxSend_NAV_VELECEF(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_ecefvx, int32_t ubx_ecefvy, int32_t ubx_ecefvz, uint32_t ubx_sacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_VELECEF_ID, 20);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _ecefvx = ubx_ecefvx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvx);
  int32_t _ecefvy = ubx_ecefvy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvy);
  int32_t _ecefvz = ubx_ecefvz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvz);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  ubx_trailer(dev);
}

#define UBX_NAV_VELNED_ID 0x12
#define UBX_NAV_VELNED_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_VELNED_velN(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_VELNED_velE(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_VELNED_velD(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_VELNED_speed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+16)|(uint32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_VELNED_gSpeed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|(uint32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_VELNED_heading(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+24)|(int32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_VELNED_sAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|(uint32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_VELNED_cAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|(uint32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_NAV_VELNED(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_veln, int32_t ubx_vele, int32_t ubx_veld, uint32_t ubx_speed, uint32_t ubx_gspeed, int32_t ubx_heading, uint32_t ubx_sacc, uint32_t ubx_cacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_VELNED_ID, 36);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _veln = ubx_veln; ubx_send_bytes(dev, 4, (uint8_t*)&_veln);
  int32_t _vele = ubx_vele; ubx_send_bytes(dev, 4, (uint8_t*)&_vele);
  int32_t _veld = ubx_veld; ubx_send_bytes(dev, 4, (uint8_t*)&_veld);
  uint32_t _speed = ubx_speed; ubx_send_bytes(dev, 4, (uint8_t*)&_speed);
  uint32_t _gspeed = ubx_gspeed; ubx_send_bytes(dev, 4, (uint8_t*)&_gspeed);
  int32_t _heading = ubx_heading; ubx_send_bytes(dev, 4, (uint8_t*)&_heading);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint32_t _cacc = ubx_cacc; ubx_send_bytes(dev, 4, (uint8_t*)&_cacc);
  ubx_trailer(dev);
}

#define UBX_NAV_HPPOSECEF_ID 0x13
#define UBX_NAV_HPPOSECEF_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_NAV_HPPOSECEF_reserved1a(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+1)|(uint16_t)(*((uint8_t*)_ubx_payload+1+1))<<8)
#define UBX_NAV_HPPOSECEF_reserved1b(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_NAV_HPPOSECEF_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_HPPOSECEF_ecefX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_HPPOSECEF_ecefY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_HPPOSECEF_ecefZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_HPPOSECEF_ecefXHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+20))
#define UBX_NAV_HPPOSECEF_ecefYHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+21))
#define UBX_NAV_HPPOSECEF_ecefZHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+22))
#define UBX_NAV_HPPOSECEF_reserved2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+23))
#define UBX_NAV_HPPOSECEF_pAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|(uint32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)

static inline void UbxSend_NAV_HPPOSECEF(struct link_device *dev, uint8_t ubx_version, uint16_t ubx_reserved1a, uint8_t ubx_reserved1b, uint32_t ubx_itow, int32_t ubx_ecefx, int32_t ubx_ecefy, int32_t ubx_ecefz, int8_t ubx_ecefxhp, int8_t ubx_ecefyhp, int8_t ubx_ecefzhp, uint8_t ubx_reserved2, uint32_t ubx_pacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_HPPOSECEF_ID, 28);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint16_t _reserved1a = ubx_reserved1a; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1a);
  uint8_t _reserved1b = ubx_reserved1b; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved1b);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _ecefx = ubx_ecefx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefx);
  int32_t _ecefy = ubx_ecefy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefy);
  int32_t _ecefz = ubx_ecefz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefz);
  int8_t _ecefxhp = ubx_ecefxhp; ubx_send_bytes(dev, 1, (uint8_t*)&_ecefxhp);
  int8_t _ecefyhp = ubx_ecefyhp; ubx_send_bytes(dev, 1, (uint8_t*)&_ecefyhp);
  int8_t _ecefzhp = ubx_ecefzhp; ubx_send_bytes(dev, 1, (uint8_t*)&_ecefzhp);
  uint8_t _reserved2 = ubx_reserved2; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved2);
  uint32_t _pacc = ubx_pacc; ubx_send_bytes(dev, 4, (uint8_t*)&_pacc);
  ubx_trailer(dev);
}

#define UBX_NAV_HPPOSLLH_ID 0x14
#define UBX_NAV_HPPOSLLH_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_NAV_HPPOSLLH_reserved1a(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+1)|(uint16_t)(*((uint8_t*)_ubx_payload+1+1))<<8)
#define UBX_NAV_HPPOSLLH_reserved1b(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_NAV_HPPOSLLH_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_HPPOSLLH_lon(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_HPPOSLLH_lat(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_HPPOSLLH_height(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_HPPOSLLH_hMSL(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|(int32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_HPPOSLLH_lonHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+24))
#define UBX_NAV_HPPOSLLH_latHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+25))
#define UBX_NAV_HPPOSLLH_heightHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+26))
#define UBX_NAV_HPPOSLLH_hMSLHp(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+27))
#define UBX_NAV_HPPOSLLH_hAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|(uint32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_HPPOSLLH_vAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|(uint32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_NAV_HPPOSLLH(struct link_device *dev, uint8_t ubx_version, uint16_t ubx_reserved1a, uint8_t ubx_reserved1b, uint32_t ubx_itow, int32_t ubx_lon, int32_t ubx_lat, int32_t ubx_height, int32_t ubx_hmsl, int8_t ubx_lonhp, int8_t ubx_lathp, int8_t ubx_heighthp, int8_t ubx_hmslhp, uint32_t ubx_hacc, uint32_t ubx_vacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_HPPOSLLH_ID, 36);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint16_t _reserved1a = ubx_reserved1a; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1a);
  uint8_t _reserved1b = ubx_reserved1b; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved1b);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _lon = ubx_lon; ubx_send_bytes(dev, 4, (uint8_t*)&_lon);
  int32_t _lat = ubx_lat; ubx_send_bytes(dev, 4, (uint8_t*)&_lat);
  int32_t _height = ubx_height; ubx_send_bytes(dev, 4, (uint8_t*)&_height);
  int32_t _hmsl = ubx_hmsl; ubx_send_bytes(dev, 4, (uint8_t*)&_hmsl);
  int8_t _lonhp = ubx_lonhp; ubx_send_bytes(dev, 1, (uint8_t*)&_lonhp);
  int8_t _lathp = ubx_lathp; ubx_send_bytes(dev, 1, (uint8_t*)&_lathp);
  int8_t _heighthp = ubx_heighthp; ubx_send_bytes(dev, 1, (uint8_t*)&_heighthp);
  int8_t _hmslhp = ubx_hmslhp; ubx_send_bytes(dev, 1, (uint8_t*)&_hmslhp);
  uint32_t _hacc = ubx_hacc; ubx_send_bytes(dev, 4, (uint8_t*)&_hacc);
  uint32_t _vacc = ubx_vacc; ubx_send_bytes(dev, 4, (uint8_t*)&_vacc);
  ubx_trailer(dev);
}

#define UBX_NAV_SVINFO_ID 0x30
#define UBX_NAV_SVINFO_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SVINFO_numCh(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_SVINFO_globalFlags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_SVINFO_reserved1(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|(uint16_t)(*((uint8_t*)_ubx_payload+1+6))<<8)
#define UBX_NAV_SVINFO_chn(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+8+12*_ubx_block))
#define UBX_NAV_SVINFO_svid(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+9+12*_ubx_block))
#define UBX_NAV_SVINFO_flags(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+10+12*_ubx_block))
#define UBX_NAV_SVINFO_quality(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+11+12*_ubx_block))
#define UBX_NAV_SVINFO_cno(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+12+12*_ubx_block))
#define UBX_NAV_SVINFO_elev(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+13+12*_ubx_block))
#define UBX_NAV_SVINFO_azim(_ubx_payload,_ubx_block) (int16_t)(*((uint8_t*)_ubx_payload+14+12*_ubx_block)|(int16_t)(*((uint8_t*)_ubx_payload+1+14+12*_ubx_block))<<8)
#define UBX_NAV_SVINFO_prRes(_ubx_payload,_ubx_block) (int32_t)(*((uint8_t*)_ubx_payload+16+12*_ubx_block)|(int32_t)(*((uint8_t*)_ubx_payload+1+16+12*_ubx_block))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16+12*_ubx_block))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16+12*_ubx_block))<<24)

static inline void UbxSend_NAV_SVINFO(struct link_device *dev, uint32_t ubx_itow, uint8_t ubx_numch, uint8_t ubx_globalflags, uint16_t ubx_reserved1, uint8_t ubx_chn, uint8_t ubx_svid, uint8_t ubx_flags, int8_t ubx_quality, uint8_t ubx_cno, int8_t ubx_elev, int16_t ubx_azim, int32_t ubx_prres) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SVINFO_ID, 20);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _numch = ubx_numch; ubx_send_bytes(dev, 1, (uint8_t*)&_numch);
  uint8_t _globalflags = ubx_globalflags; ubx_send_bytes(dev, 1, (uint8_t*)&_globalflags);
  uint16_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1);
  uint8_t _chn = ubx_chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = ubx_svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int8_t _quality = ubx_quality; ubx_send_bytes(dev, 1, (uint8_t*)&_quality);
  uint8_t _cno = ubx_cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  int8_t _elev = ubx_elev; ubx_send_bytes(dev, 1, (uint8_t*)&_elev);
  int16_t _azim = ubx_azim; ubx_send_bytes(dev, 2, (uint8_t*)&_azim);
  int32_t _prres = ubx_prres; ubx_send_bytes(dev, 4, (uint8_t*)&_prres);
  ubx_trailer(dev);
}

#define UBX_NAV_SAT_ID 0x35
#define UBX_NAV_SAT_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SAT_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_SAT_numSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_SAT_reserved1(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|(uint16_t)(*((uint8_t*)_ubx_payload+1+6))<<8)
#define UBX_NAV_SAT_gnssId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+8+12*_ubx_block))
#define UBX_NAV_SAT_svId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+9+12*_ubx_block))
#define UBX_NAV_SAT_cno(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+10+12*_ubx_block))
#define UBX_NAV_SAT_elev(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+11+12*_ubx_block))
#define UBX_NAV_SAT_azim(_ubx_payload,_ubx_block) (int16_t)(*((uint8_t*)_ubx_payload+12+12*_ubx_block)|(int16_t)(*((uint8_t*)_ubx_payload+1+12+12*_ubx_block))<<8)
#define UBX_NAV_SAT_prRes(_ubx_payload,_ubx_block) (int16_t)(*((uint8_t*)_ubx_payload+14+12*_ubx_block)|(int16_t)(*((uint8_t*)_ubx_payload+1+14+12*_ubx_block))<<8)
#define UBX_NAV_SAT_flags(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+16+12*_ubx_block)|(uint32_t)(*((uint8_t*)_ubx_payload+1+16+12*_ubx_block))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16+12*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16+12*_ubx_block))<<24)

static inline void UbxSend_NAV_SAT(struct link_device *dev, uint32_t ubx_itow, uint8_t ubx_version, uint8_t ubx_numsvs, uint16_t ubx_reserved1, uint8_t ubx_gnssid, uint8_t ubx_svid, uint8_t ubx_cno, int8_t ubx_elev, int16_t ubx_azim, int16_t ubx_prres, uint32_t ubx_flags) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SAT_ID, 20);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _numsvs = ubx_numsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_numsvs);
  uint16_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1);
  uint8_t _gnssid = ubx_gnssid; ubx_send_bytes(dev, 1, (uint8_t*)&_gnssid);
  uint8_t _svid = ubx_svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint8_t _cno = ubx_cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  int8_t _elev = ubx_elev; ubx_send_bytes(dev, 1, (uint8_t*)&_elev);
  int16_t _azim = ubx_azim; ubx_send_bytes(dev, 2, (uint8_t*)&_azim);
  int16_t _prres = ubx_prres; ubx_send_bytes(dev, 2, (uint8_t*)&_prres);
  uint32_t _flags = ubx_flags; ubx_send_bytes(dev, 4, (uint8_t*)&_flags);
  ubx_trailer(dev);
}

#define UBX_NAV_RELPOSNED_ID 0x3C
#define UBX_NAV_RELPOSNED_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_NAV_RELPOSNED_reserved1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_NAV_RELPOSNED_refStationId(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2))<<8)
#define UBX_NAV_RELPOSNED_iTOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_RELPOSNED_relPosN(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_RELPOSNED_relPosE(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_RELPOSNED_relPosD(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_RELPOSNED_relPosLength(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|(int32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_RELPOSNED_relPosHeading(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+24)|(int32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_RELPOSNED_reserved2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|(uint32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_RELPOSNED_relPosHPN(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+32))
#define UBX_NAV_RELPOSNED_relPosHPE(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+33))
#define UBX_NAV_RELPOSNED_relPosHPD(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+34))
#define UBX_NAV_RELPOSNED_relPosHPLength(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+35))
#define UBX_NAV_RELPOSNED_accN(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+36)|(uint32_t)(*((uint8_t*)_ubx_payload+1+36))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+36))<<24)
#define UBX_NAV_RELPOSNED_accE(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+40)|(uint32_t)(*((uint8_t*)_ubx_payload+1+40))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+40))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+40))<<24)
#define UBX_NAV_RELPOSNED_accD(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+44)|(uint32_t)(*((uint8_t*)_ubx_payload+1+44))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+44))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+44))<<24)
#define UBX_NAV_RELPOSNED_accLength(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+48)|(uint32_t)(*((uint8_t*)_ubx_payload+1+48))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+48))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+48))<<24)
#define UBX_NAV_RELPOSNED_accHeading(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+52)|(uint32_t)(*((uint8_t*)_ubx_payload+1+52))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+52))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+52))<<24)
#define UBX_NAV_RELPOSNED_reserved3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+56)|(uint32_t)(*((uint8_t*)_ubx_payload+1+56))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+56))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+56))<<24)
#define UBX_NAV_RELPOSNED_flags(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+60)|(uint32_t)(*((uint8_t*)_ubx_payload+1+60))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+60))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+60))<<24)

static inline void UbxSend_NAV_RELPOSNED(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_reserved1, uint16_t ubx_refstationid, uint32_t ubx_itow, int32_t ubx_relposn, int32_t ubx_relpose, int32_t ubx_relposd, int32_t ubx_relposlength, int32_t ubx_relposheading, uint32_t ubx_reserved2, int8_t ubx_relposhpn, int8_t ubx_relposhpe, int8_t ubx_relposhpd, int8_t ubx_relposhplength, uint32_t ubx_accn, uint32_t ubx_acce, uint32_t ubx_accd, uint32_t ubx_acclength, uint32_t ubx_accheading, uint32_t ubx_reserved3, uint32_t ubx_flags) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_RELPOSNED_ID, 64);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved1);
  uint16_t _refstationid = ubx_refstationid; ubx_send_bytes(dev, 2, (uint8_t*)&_refstationid);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _relposn = ubx_relposn; ubx_send_bytes(dev, 4, (uint8_t*)&_relposn);
  int32_t _relpose = ubx_relpose; ubx_send_bytes(dev, 4, (uint8_t*)&_relpose);
  int32_t _relposd = ubx_relposd; ubx_send_bytes(dev, 4, (uint8_t*)&_relposd);
  int32_t _relposlength = ubx_relposlength; ubx_send_bytes(dev, 4, (uint8_t*)&_relposlength);
  int32_t _relposheading = ubx_relposheading; ubx_send_bytes(dev, 4, (uint8_t*)&_relposheading);
  uint32_t _reserved2 = ubx_reserved2; ubx_send_bytes(dev, 4, (uint8_t*)&_reserved2);
  int8_t _relposhpn = ubx_relposhpn; ubx_send_bytes(dev, 1, (uint8_t*)&_relposhpn);
  int8_t _relposhpe = ubx_relposhpe; ubx_send_bytes(dev, 1, (uint8_t*)&_relposhpe);
  int8_t _relposhpd = ubx_relposhpd; ubx_send_bytes(dev, 1, (uint8_t*)&_relposhpd);
  int8_t _relposhplength = ubx_relposhplength; ubx_send_bytes(dev, 1, (uint8_t*)&_relposhplength);
  uint32_t _accn = ubx_accn; ubx_send_bytes(dev, 4, (uint8_t*)&_accn);
  uint32_t _acce = ubx_acce; ubx_send_bytes(dev, 4, (uint8_t*)&_acce);
  uint32_t _accd = ubx_accd; ubx_send_bytes(dev, 4, (uint8_t*)&_accd);
  uint32_t _acclength = ubx_acclength; ubx_send_bytes(dev, 4, (uint8_t*)&_acclength);
  uint32_t _accheading = ubx_accheading; ubx_send_bytes(dev, 4, (uint8_t*)&_accheading);
  uint32_t _reserved3 = ubx_reserved3; ubx_send_bytes(dev, 4, (uint8_t*)&_reserved3);
  uint32_t _flags = ubx_flags; ubx_send_bytes(dev, 4, (uint8_t*)&_flags);
  ubx_trailer(dev);
}

#define UBX_NAV_SVIN_ID 0x3B
#define UBX_NAV_SVIN_VERSION(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_NAV_SVIN_RES1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_NAV_SVIN_RES2(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2))<<8)
#define UBX_NAV_SVIN_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_SVIN_dur(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_SVIN_meanX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_SVIN_meanY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|(int32_t)(*((uint8_t*)_ubx_payload+1+16))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_SVIN_meanZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|(int32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_SVIN_meanXHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+24))
#define UBX_NAV_SVIN_meanYHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+25))
#define UBX_NAV_SVIN_meanZHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+26))
#define UBX_NAV_SVIN_RES3(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+27))
#define UBX_NAV_SVIN_meanACC(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|(uint32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_SVIN_OBS(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|(uint32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_NAV_SVIN_Valid(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+36))
#define UBX_NAV_SVIN_Active(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+37))
#define UBX_NAV_SVIN_RES4(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+38)|(uint16_t)(*((uint8_t*)_ubx_payload+1+38))<<8)

static inline void UbxSend_NAV_SVIN(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_res1, uint16_t ubx_res2, uint32_t ubx_itow, uint32_t ubx_dur, int32_t ubx_meanx, int32_t ubx_meany, int32_t ubx_meanz, int8_t ubx_meanxhp, int8_t ubx_meanyhp, int8_t ubx_meanzhp, uint8_t ubx_res3, uint32_t ubx_meanacc, uint32_t ubx_obs, uint8_t ubx_valid, uint8_t ubx_active, uint16_t ubx_res4) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SVIN_ID, 40);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _res1 = ubx_res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint16_t _res2 = ubx_res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint32_t _dur = ubx_dur; ubx_send_bytes(dev, 4, (uint8_t*)&_dur);
  int32_t _meanx = ubx_meanx; ubx_send_bytes(dev, 4, (uint8_t*)&_meanx);
  int32_t _meany = ubx_meany; ubx_send_bytes(dev, 4, (uint8_t*)&_meany);
  int32_t _meanz = ubx_meanz; ubx_send_bytes(dev, 4, (uint8_t*)&_meanz);
  int8_t _meanxhp = ubx_meanxhp; ubx_send_bytes(dev, 1, (uint8_t*)&_meanxhp);
  int8_t _meanyhp = ubx_meanyhp; ubx_send_bytes(dev, 1, (uint8_t*)&_meanyhp);
  int8_t _meanzhp = ubx_meanzhp; ubx_send_bytes(dev, 1, (uint8_t*)&_meanzhp);
  uint8_t _res3 = ubx_res3; ubx_send_bytes(dev, 1, (uint8_t*)&_res3);
  uint32_t _meanacc = ubx_meanacc; ubx_send_bytes(dev, 4, (uint8_t*)&_meanacc);
  uint32_t _obs = ubx_obs; ubx_send_bytes(dev, 4, (uint8_t*)&_obs);
  uint8_t _valid = ubx_valid; ubx_send_bytes(dev, 1, (uint8_t*)&_valid);
  uint8_t _active = ubx_active; ubx_send_bytes(dev, 1, (uint8_t*)&_active);
  uint16_t _res4 = ubx_res4; ubx_send_bytes(dev, 2, (uint8_t*)&_res4);
  ubx_trailer(dev);
}

#define UBX_CFG_ID 0x06

#define UBX_CFG_PRT_ID 0x00
#define UBX_CFG_PRT_PortId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+20*_ubx_block))
#define UBX_CFG_PRT_ReS0(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+1+20*_ubx_block))
#define UBX_CFG_PRT_ReS1(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+2+20*_ubx_block)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2+20*_ubx_block))<<8)
#define UBX_CFG_PRT_Mode(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+4+20*_ubx_block)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4+20*_ubx_block))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4+20*_ubx_block))<<24)
#define UBX_CFG_PRT_Baudrate(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+8+20*_ubx_block)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8+20*_ubx_block))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8+20*_ubx_block))<<24)
#define UBX_CFG_PRT_In_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+12+20*_ubx_block)|(uint16_t)(*((uint8_t*)_ubx_payload+1+12+20*_ubx_block))<<8)
#define UBX_CFG_PRT_Out_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+14+20*_ubx_block)|(uint16_t)(*((uint8_t*)_ubx_payload+1+14+20*_ubx_block))<<8)
#define UBX_CFG_PRT_Flags(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+16+20*_ubx_block)|(uint16_t)(*((uint8_t*)_ubx_payload+1+16+20*_ubx_block))<<8)
#define UBX_CFG_PRT_Res2(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+18+20*_ubx_block)|(uint16_t)(*((uint8_t*)_ubx_payload+1+18+20*_ubx_block))<<8)

static inline void UbxSend_CFG_PRT(struct link_device *dev, uint8_t ubx_portid, uint8_t ubx_res0, uint16_t ubx_res1, uint32_t ubx_mode, uint32_t ubx_baudrate, uint16_t ubx_in_proto_mask, uint16_t ubx_out_proto_mask, uint16_t ubx_flags, uint16_t ubx_res2) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_ID, 20);
  uint8_t _portid = ubx_portid; ubx_send_bytes(dev, 1, (uint8_t*)&_portid);
  uint8_t _res0 = ubx_res0; ubx_send_bytes(dev, 1, (uint8_t*)&_res0);
  uint16_t _res1 = ubx_res1; ubx_send_bytes(dev, 2, (uint8_t*)&_res1);
  uint32_t _mode = ubx_mode; ubx_send_bytes(dev, 4, (uint8_t*)&_mode);
  uint32_t _baudrate = ubx_baudrate; ubx_send_bytes(dev, 4, (uint8_t*)&_baudrate);
  uint16_t _in_proto_mask = ubx_in_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_in_proto_mask);
  uint16_t _out_proto_mask = ubx_out_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_out_proto_mask);
  uint16_t _flags = ubx_flags; ubx_send_bytes(dev, 2, (uint8_t*)&_flags);
  uint16_t _res2 = ubx_res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_CFG_PRT_POLL_ID 0x00

static inline void UbxSend_CFG_PRT_POLL(struct link_device *dev) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_POLL_ID, 0);
  ubx_trailer(dev);
}

#define UBX_CFG_MSG_ID 0x01
#define UBX_CFG_MSG_Class(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_MSG_MsgId(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_MSG_Rate(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))

static inline void UbxSend_CFG_MSG(struct link_device *dev, uint8_t ubx_class, uint8_t ubx_msgid, uint8_t ubx_rate) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_MSG_ID, 3);
  uint8_t _class = ubx_class; ubx_send_bytes(dev, 1, (uint8_t*)&_class);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  uint8_t _rate = ubx_rate; ubx_send_bytes(dev, 1, (uint8_t*)&_rate);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV_ID 0x03
#define UBX_CFG_NAV_Platform(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_NAV_MinSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_NAV_MaxSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV_MinCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV_AbsCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_CFG_NAV_MinELE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_CFG_NAV_DGPSTTR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_CFG_NAV_DGPST0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_CFG_NAV_PRCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+8))
#define UBX_CFG_NAV_CPCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+9))
#define UBX_CFG_NAV_MinCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|(uint16_t)(*((uint8_t*)_ubx_payload+1+10))<<8)
#define UBX_CFG_NAV_AbsCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|(uint16_t)(*((uint8_t*)_ubx_payload+1+12))<<8)
#define UBX_CFG_NAV_MaxDR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+14))
#define UBX_CFG_NAV_NAVOPT(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+15))
#define UBX_CFG_NAV_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|(uint16_t)(*((uint8_t*)_ubx_payload+1+16))<<8)
#define UBX_CFG_NAV_TDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|(uint16_t)(*((uint8_t*)_ubx_payload+1+18))<<8)
#define UBX_CFG_NAV_PACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|(uint16_t)(*((uint8_t*)_ubx_payload+1+20))<<8)
#define UBX_CFG_NAV_TACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+22)|(uint16_t)(*((uint8_t*)_ubx_payload+1+22))<<8)
#define UBX_CFG_NAV_FACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+24)|(uint16_t)(*((uint8_t*)_ubx_payload+1+24))<<8)
#define UBX_CFG_NAV_StaticThres(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+26))
#define UBX_CFG_NAV_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+27))

static inline void UbxSend_CFG_NAV(struct link_device *dev, uint8_t ubx_platform, uint8_t ubx_minsvs, uint8_t ubx_maxsvs, uint8_t ubx_mincn0, uint8_t ubx_abscn0, uint8_t ubx_minele, uint8_t ubx_dgpsttr, uint8_t ubx_dgpst0, uint8_t ubx_prcage, uint8_t ubx_cpcage, uint16_t ubx_minclt, uint16_t ubx_absclt, uint8_t ubx_maxdr, uint8_t ubx_navopt, uint16_t ubx_pdop, uint16_t ubx_tdop, uint16_t ubx_pacc, uint16_t ubx_tacc, uint16_t ubx_facc, uint8_t ubx_staticthres, uint8_t ubx_reserved) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV_ID, 28);
  uint8_t _platform = ubx_platform; ubx_send_bytes(dev, 1, (uint8_t*)&_platform);
  uint8_t _minsvs = ubx_minsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_minsvs);
  uint8_t _maxsvs = ubx_maxsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_maxsvs);
  uint8_t _mincn0 = ubx_mincn0; ubx_send_bytes(dev, 1, (uint8_t*)&_mincn0);
  uint8_t _abscn0 = ubx_abscn0; ubx_send_bytes(dev, 1, (uint8_t*)&_abscn0);
  uint8_t _minele = ubx_minele; ubx_send_bytes(dev, 1, (uint8_t*)&_minele);
  uint8_t _dgpsttr = ubx_dgpsttr; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpsttr);
  uint8_t _dgpst0 = ubx_dgpst0; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpst0);
  uint8_t _prcage = ubx_prcage; ubx_send_bytes(dev, 1, (uint8_t*)&_prcage);
  uint8_t _cpcage = ubx_cpcage; ubx_send_bytes(dev, 1, (uint8_t*)&_cpcage);
  uint16_t _minclt = ubx_minclt; ubx_send_bytes(dev, 2, (uint8_t*)&_minclt);
  uint16_t _absclt = ubx_absclt; ubx_send_bytes(dev, 2, (uint8_t*)&_absclt);
  uint8_t _maxdr = ubx_maxdr; ubx_send_bytes(dev, 1, (uint8_t*)&_maxdr);
  uint8_t _navopt = ubx_navopt; ubx_send_bytes(dev, 1, (uint8_t*)&_navopt);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = ubx_pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = ubx_tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint16_t _facc = ubx_facc; ubx_send_bytes(dev, 2, (uint8_t*)&_facc);
  uint8_t _staticthres = ubx_staticthres; ubx_send_bytes(dev, 1, (uint8_t*)&_staticthres);
  uint8_t _reserved = ubx_reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  ubx_trailer(dev);
}

#define UBX_CFG_RST_ID 0x04
#define UBX_CFG_RST_nav_bbr(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|(uint16_t)(*((uint8_t*)_ubx_payload+1+0))<<8)
#define UBX_CFG_RST_Reset(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_RST_Res(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))

static inline void UbxSend_CFG_RST(struct link_device *dev, uint16_t ubx_nav_bbr, uint8_t ubx_reset, uint8_t ubx_res) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RST_ID, 4);
  uint16_t _nav_bbr = ubx_nav_bbr; ubx_send_bytes(dev, 2, (uint8_t*)&_nav_bbr);
  uint8_t _reset = ubx_reset; ubx_send_bytes(dev, 1, (uint8_t*)&_reset);
  uint8_t _res = ubx_res; ubx_send_bytes(dev, 1, (uint8_t*)&_res);
  ubx_trailer(dev);
}

#define UBX_CFG_RATE_ID 0x08
#define UBX_CFG_RATE_Meas(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|(uint16_t)(*((uint8_t*)_ubx_payload+1+0))<<8)
#define UBX_CFG_RATE_Nav(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2))<<8)
#define UBX_CFG_RATE_Time(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|(uint16_t)(*((uint8_t*)_ubx_payload+1+4))<<8)

static inline void UbxSend_CFG_RATE(struct link_device *dev, uint16_t ubx_meas, uint16_t ubx_nav, uint16_t ubx_time) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RATE_ID, 6);
  uint16_t _meas = ubx_meas; ubx_send_bytes(dev, 2, (uint8_t*)&_meas);
  uint16_t _nav = ubx_nav; ubx_send_bytes(dev, 2, (uint8_t*)&_nav);
  uint16_t _time = ubx_time; ubx_send_bytes(dev, 2, (uint8_t*)&_time);
  ubx_trailer(dev);
}

#define UBX_CFG_CFG_ID 0x09
#define UBX_CFG_CFG_Clear_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|(uint32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_CFG_CFG_Save_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_CFG_Load_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)

static inline void UbxSend_CFG_CFG(struct link_device *dev, uint32_t ubx_clear_mask, uint32_t ubx_save_mask, uint32_t ubx_load_mask) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_CFG_ID, 12);
  uint32_t _clear_mask = ubx_clear_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_clear_mask);
  uint32_t _save_mask = ubx_save_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_save_mask);
  uint32_t _load_mask = ubx_load_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_load_mask);
  ubx_trailer(dev);
}

#define UBX_CFG_SBAS_ID 0x16
#define UBX_CFG_SBAS_mode(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_SBAS_usage(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_SBAS_maxbas(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_SBAS_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_SBAS_scanmode(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|(uint32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)

static inline void UbxSend_CFG_SBAS(struct link_device *dev, uint8_t ubx_mode, uint8_t ubx_usage, uint8_t ubx_maxbas, uint8_t ubx_reserved, uint32_t ubx_scanmode) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_SBAS_ID, 8);
  uint8_t _mode = ubx_mode; ubx_send_bytes(dev, 1, (uint8_t*)&_mode);
  uint8_t _usage = ubx_usage; ubx_send_bytes(dev, 1, (uint8_t*)&_usage);
  uint8_t _maxbas = ubx_maxbas; ubx_send_bytes(dev, 1, (uint8_t*)&_maxbas);
  uint8_t _reserved = ubx_reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  uint32_t _scanmode = ubx_scanmode; ubx_send_bytes(dev, 4, (uint8_t*)&_scanmode);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV5_ID 0x24
#define UBX_CFG_NAV5_mask(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|(uint16_t)(*((uint8_t*)_ubx_payload+1+0))<<8)
#define UBX_CFG_NAV5_dynModel(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV5_fixMode(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV5_fixedAlt(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_NAV5_fixedAltVar(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_CFG_NAV5_minElev(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+12))
#define UBX_CFG_NAV5_drLimit(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+13))
#define UBX_CFG_NAV5_pDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|(uint16_t)(*((uint8_t*)_ubx_payload+1+14))<<8)
#define UBX_CFG_NAV5_tDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|(uint16_t)(*((uint8_t*)_ubx_payload+1+16))<<8)
#define UBX_CFG_NAV5_pAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|(uint16_t)(*((uint8_t*)_ubx_payload+1+18))<<8)
#define UBX_CFG_NAV5_tAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|(uint16_t)(*((uint8_t*)_ubx_payload+1+20))<<8)
#define UBX_CFG_NAV5_staticHoldThresh(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+22))
#define UBX_CFG_NAV5_dgnssTimeout(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+23))
#define UBX_CFG_NAV5_cnoThreshNumSVs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+24))
#define UBX_CFG_NAV5_cnoThresh(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+25))
#define UBX_CFG_NAV5_reserved1(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+26)|(uint16_t)(*((uint8_t*)_ubx_payload+1+26))<<8)
#define UBX_CFG_NAV5_staticHoldMaxDist(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+28)|(uint16_t)(*((uint8_t*)_ubx_payload+1+28))<<8)
#define UBX_CFG_NAV5_utcStandard(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+30))
#define UBX_CFG_NAV5_reserved2a(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+31)|(uint32_t)(*((uint8_t*)_ubx_payload+1+31))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+31))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+31))<<24)
#define UBX_CFG_NAV5_reserved2b(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+35))

static inline void UbxSend_CFG_NAV5(struct link_device *dev, uint16_t ubx_mask, uint8_t ubx_dynmodel, uint8_t ubx_fixmode, int32_t ubx_fixedalt, uint32_t ubx_fixedaltvar, int8_t ubx_minelev, uint8_t ubx_drlimit, uint16_t ubx_pdop, uint16_t ubx_tdop, uint16_t ubx_pacc, uint16_t ubx_tacc, uint8_t ubx_staticholdthresh, uint8_t ubx_dgnsstimeout, uint8_t ubx_cnothreshnumsvs, uint8_t ubx_cnothresh, uint16_t ubx_reserved1, uint16_t ubx_staticholdmaxdist, uint8_t ubx_utcstandard, uint32_t ubx_reserved2a, uint8_t ubx_reserved2b) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV5_ID, 36);
  uint16_t _mask = ubx_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_mask);
  uint8_t _dynmodel = ubx_dynmodel; ubx_send_bytes(dev, 1, (uint8_t*)&_dynmodel);
  uint8_t _fixmode = ubx_fixmode; ubx_send_bytes(dev, 1, (uint8_t*)&_fixmode);
  int32_t _fixedalt = ubx_fixedalt; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedalt);
  uint32_t _fixedaltvar = ubx_fixedaltvar; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedaltvar);
  int8_t _minelev = ubx_minelev; ubx_send_bytes(dev, 1, (uint8_t*)&_minelev);
  uint8_t _drlimit = ubx_drlimit; ubx_send_bytes(dev, 1, (uint8_t*)&_drlimit);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = ubx_pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = ubx_tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint8_t _staticholdthresh = ubx_staticholdthresh; ubx_send_bytes(dev, 1, (uint8_t*)&_staticholdthresh);
  uint8_t _dgnsstimeout = ubx_dgnsstimeout; ubx_send_bytes(dev, 1, (uint8_t*)&_dgnsstimeout);
  uint8_t _cnothreshnumsvs = ubx_cnothreshnumsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_cnothreshnumsvs);
  uint8_t _cnothresh = ubx_cnothresh; ubx_send_bytes(dev, 1, (uint8_t*)&_cnothresh);
  uint16_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1);
  uint16_t _staticholdmaxdist = ubx_staticholdmaxdist; ubx_send_bytes(dev, 2, (uint8_t*)&_staticholdmaxdist);
  uint8_t _utcstandard = ubx_utcstandard; ubx_send_bytes(dev, 1, (uint8_t*)&_utcstandard);
  uint32_t _reserved2a = ubx_reserved2a; ubx_send_bytes(dev, 4, (uint8_t*)&_reserved2a);
  uint8_t _reserved2b = ubx_reserved2b; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved2b);
  ubx_trailer(dev);
}

#define UBX_CFG_GNSS_ID 0x3E
#define UBX_CFG_GNSS_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_GNSS_numTrkChHw(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_GNSS_numTrkChUse(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_GNSS_numConfigBlocks(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_GNSS_gnssId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+4+8*_ubx_block))
#define UBX_CFG_GNSS_resTrckCh(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+5+8*_ubx_block))
#define UBX_CFG_GNSS_maxTrckCh(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+6+8*_ubx_block))
#define UBX_CFG_GNSS_reserved(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+7+8*_ubx_block))
#define UBX_CFG_GNSS_flags(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+8+8*_ubx_block)|(uint32_t)(*((uint8_t*)_ubx_payload+1+8+8*_ubx_block))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8+8*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8+8*_ubx_block))<<24)

static inline void UbxSend_CFG_GNSS(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_numtrkchhw, uint8_t ubx_numtrkchuse, uint8_t ubx_numconfigblocks, uint8_t ubx_gnssid, uint8_t ubx_restrckch, uint8_t ubx_maxtrckch, uint8_t ubx_reserved, uint32_t ubx_flags) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_GNSS_ID, 12);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _numtrkchhw = ubx_numtrkchhw; ubx_send_bytes(dev, 1, (uint8_t*)&_numtrkchhw);
  uint8_t _numtrkchuse = ubx_numtrkchuse; ubx_send_bytes(dev, 1, (uint8_t*)&_numtrkchuse);
  uint8_t _numconfigblocks = ubx_numconfigblocks; ubx_send_bytes(dev, 1, (uint8_t*)&_numconfigblocks);
  uint8_t _gnssid = ubx_gnssid; ubx_send_bytes(dev, 1, (uint8_t*)&_gnssid);
  uint8_t _restrckch = ubx_restrckch; ubx_send_bytes(dev, 1, (uint8_t*)&_restrckch);
  uint8_t _maxtrckch = ubx_maxtrckch; ubx_send_bytes(dev, 1, (uint8_t*)&_maxtrckch);
  uint8_t _reserved = ubx_reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  uint32_t _flags = ubx_flags; ubx_send_bytes(dev, 4, (uint8_t*)&_flags);
  ubx_trailer(dev);
}

#define UBX_CFG_DGNSS_ID 0x70
#define UBX_CFG_DGNSS_dgnssMode(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_DGNSS_RES1(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+1)|(uint16_t)(*((uint8_t*)_ubx_payload+1+1))<<8)
#define UBX_CFG_DGNSS_RES2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))

static inline void UbxSend_CFG_DGNSS(struct link_device *dev, uint8_t ubx_dgnssmode, uint16_t ubx_res1, uint8_t ubx_res2) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_DGNSS_ID, 4);
  uint8_t _dgnssmode = ubx_dgnssmode; ubx_send_bytes(dev, 1, (uint8_t*)&_dgnssmode);
  uint16_t _res1 = ubx_res1; ubx_send_bytes(dev, 2, (uint8_t*)&_res1);
  uint8_t _res2 = ubx_res2; ubx_send_bytes(dev, 1, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_CFG_TMODE3_ID 0x71
#define UBX_CFG_TMODE3_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_TMODE3_RES1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_TMODE3_flags(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2))<<8)
#define UBX_CFG_TMODE3_EcecfXOrLat(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|(int32_t)(*((uint8_t*)_ubx_payload+1+4))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_TMODE3_EcecfYOrLon(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|(int32_t)(*((uint8_t*)_ubx_payload+1+8))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_CFG_TMODE3_EcecfZOrAlt(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|(int32_t)(*((uint8_t*)_ubx_payload+1+12))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_CFG_TMODE3_EcecfXOrLatHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+16))
#define UBX_CFG_TMODE3_EcecfYOrLonHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+17))
#define UBX_CFG_TMODE3_EcecfZOrAltHP(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+18))
#define UBX_CFG_TMODE3_RES2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+19))
#define UBX_CFG_TMODE3_FixedPosACC(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|(uint32_t)(*((uint8_t*)_ubx_payload+1+20))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_CFG_TMODE3_SvinMinDur(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|(uint32_t)(*((uint8_t*)_ubx_payload+1+24))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_CFG_TMODE3_SvinAcclimit(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|(uint32_t)(*((uint8_t*)_ubx_payload+1+28))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_CFG_TMODE3_RES3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|(uint32_t)(*((uint8_t*)_ubx_payload+1+32))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_CFG_TMODE3_RES4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+36)|(uint32_t)(*((uint8_t*)_ubx_payload+1+36))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+36))<<24)

static inline void UbxSend_CFG_TMODE3(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_res1, uint16_t ubx_flags, int32_t ubx_ececfxorlat, int32_t ubx_ececfyorlon, int32_t ubx_ececfzoralt, int8_t ubx_ececfxorlathp, int8_t ubx_ececfyorlonhp, int8_t ubx_ececfzoralthp, uint8_t ubx_res2, uint32_t ubx_fixedposacc, uint32_t ubx_svinmindur, uint32_t ubx_svinacclimit, uint32_t ubx_res3, uint32_t ubx_res4) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_TMODE3_ID, 40);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _res1 = ubx_res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint16_t _flags = ubx_flags; ubx_send_bytes(dev, 2, (uint8_t*)&_flags);
  int32_t _ececfxorlat = ubx_ececfxorlat; ubx_send_bytes(dev, 4, (uint8_t*)&_ececfxorlat);
  int32_t _ececfyorlon = ubx_ececfyorlon; ubx_send_bytes(dev, 4, (uint8_t*)&_ececfyorlon);
  int32_t _ececfzoralt = ubx_ececfzoralt; ubx_send_bytes(dev, 4, (uint8_t*)&_ececfzoralt);
  int8_t _ececfxorlathp = ubx_ececfxorlathp; ubx_send_bytes(dev, 1, (uint8_t*)&_ececfxorlathp);
  int8_t _ececfyorlonhp = ubx_ececfyorlonhp; ubx_send_bytes(dev, 1, (uint8_t*)&_ececfyorlonhp);
  int8_t _ececfzoralthp = ubx_ececfzoralthp; ubx_send_bytes(dev, 1, (uint8_t*)&_ececfzoralthp);
  uint8_t _res2 = ubx_res2; ubx_send_bytes(dev, 1, (uint8_t*)&_res2);
  uint32_t _fixedposacc = ubx_fixedposacc; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedposacc);
  uint32_t _svinmindur = ubx_svinmindur; ubx_send_bytes(dev, 4, (uint8_t*)&_svinmindur);
  uint32_t _svinacclimit = ubx_svinacclimit; ubx_send_bytes(dev, 4, (uint8_t*)&_svinacclimit);
  uint32_t _res3 = ubx_res3; ubx_send_bytes(dev, 4, (uint8_t*)&_res3);
  uint32_t _res4 = ubx_res4; ubx_send_bytes(dev, 4, (uint8_t*)&_res4);
  ubx_trailer(dev);
}

#define UBX_ACK_ID 0x05

#define UBX_ACK_ACK_ID 0x01
#define UBX_ACK_ACK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_ACK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_ACK(struct link_device *dev, uint8_t ubx_clsid, uint8_t ubx_msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_ACK_ID, 2);
  uint8_t _clsid = ubx_clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_ACK_NAK_ID 0x00
#define UBX_ACK_NAK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_NAK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_NAK(struct link_device *dev, uint8_t ubx_clsid, uint8_t ubx_msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_NAK_ID, 2);
  uint8_t _clsid = ubx_clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_RXM_ID 0x02

#define UBX_RXM_RAW_ID 0x10
#define UBX_RXM_RAW_iTOW(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+0)|(int32_t)(*((uint8_t*)_ubx_payload+1+0))<<8|((int32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_RXM_RAW_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+4)|(int16_t)(*((uint8_t*)_ubx_payload+1+4))<<8)
#define UBX_RXM_RAW_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_RXM_RAW_reserverd1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_RXM_RAW_cpMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+8+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+8+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+8+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+8+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+8+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+8+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+8+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+8+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_prMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+16+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+16+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+16+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+16+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+16+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+16+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+16+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+16+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_doMes(_ubx_payload,_ubx_block) ({ union { uint32_t u; float f; } _f; _f.u = (uint32_t)(*((uint8_t*)_ubx_payload+24+24*_ubx_block)|(uint32_t)(*((uint8_t*)_ubx_payload+1+24+24*_ubx_block))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24+24*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24+24*_ubx_block))<<24); _f.f; })
#define UBX_RXM_RAW_sv(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+28+24*_ubx_block))
#define UBX_RXM_RAW_mesQI(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+29+24*_ubx_block))
#define UBX_RXM_RAW_cno(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+30+24*_ubx_block))
#define UBX_RXM_RAW_lli(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+31+24*_ubx_block))

static inline void UbxSend_RXM_RAW(struct link_device *dev, int32_t ubx_itow, int16_t ubx_week, uint8_t ubx_numsv, uint8_t ubx_reserverd1, double ubx_cpmes, double ubx_prmes, float ubx_domes, uint8_t ubx_sv, int8_t ubx_mesqi, int8_t ubx_cno, uint8_t ubx_lli) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_RAW_ID, 32);
  int32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int16_t _week = ubx_week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _numsv = ubx_numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint8_t _reserverd1 = ubx_reserverd1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserverd1);
  double _cpmes = ubx_cpmes; ubx_send_bytes(dev, 8, (uint8_t*)&_cpmes);
  double _prmes = ubx_prmes; ubx_send_bytes(dev, 8, (uint8_t*)&_prmes);
  float _domes = ubx_domes; ubx_send_bytes(dev, 4, (uint8_t*)&_domes);
  uint8_t _sv = ubx_sv; ubx_send_bytes(dev, 1, (uint8_t*)&_sv);
  int8_t _mesqi = ubx_mesqi; ubx_send_bytes(dev, 1, (uint8_t*)&_mesqi);
  int8_t _cno = ubx_cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  uint8_t _lli = ubx_lli; ubx_send_bytes(dev, 1, (uint8_t*)&_lli);
  ubx_trailer(dev);
}

#define UBX_RXM_SFRB_ID 0x11
#define UBX_RXM_SFRB_chn(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_RXM_SFRB_svid(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_RXM_SFRB_dwrd0(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+2)|(uint32_t)(*((uint8_t*)_ubx_payload+1+2))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+2))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+2))<<24)
#define UBX_RXM_SFRB_dwrd1(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+6)|(uint32_t)(*((uint8_t*)_ubx_payload+1+6))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+6))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+6))<<24)
#define UBX_RXM_SFRB_dwrd2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+10)|(uint32_t)(*((uint8_t*)_ubx_payload+1+10))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+10))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+10))<<24)
#define UBX_RXM_SFRB_dwrd3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+14)|(uint32_t)(*((uint8_t*)_ubx_payload+1+14))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+14))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+14))<<24)
#define UBX_RXM_SFRB_dwrd4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+18)|(uint32_t)(*((uint8_t*)_ubx_payload+1+18))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+18))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+18))<<24)
#define UBX_RXM_SFRB_dwrd5(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+22)|(uint32_t)(*((uint8_t*)_ubx_payload+1+22))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+22))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+22))<<24)
#define UBX_RXM_SFRB_dwrd6(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+26)|(uint32_t)(*((uint8_t*)_ubx_payload+1+26))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+26))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+26))<<24)
#define UBX_RXM_SFRB_dwrd7(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+30)|(uint32_t)(*((uint8_t*)_ubx_payload+1+30))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+30))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+30))<<24)
#define UBX_RXM_SFRB_dwrd8(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+34)|(uint32_t)(*((uint8_t*)_ubx_payload+1+34))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+34))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+34))<<24)
#define UBX_RXM_SFRB_dwrd9(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+38)|(uint32_t)(*((uint8_t*)_ubx_payload+1+38))<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+38))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+38))<<24)

static inline void UbxSend_RXM_SFRB(struct link_device *dev, uint8_t ubx_chn, uint8_t ubx_svid, uint32_t ubx_dwrd0, uint32_t ubx_dwrd1, uint32_t ubx_dwrd2, uint32_t ubx_dwrd3, uint32_t ubx_dwrd4, uint32_t ubx_dwrd5, uint32_t ubx_dwrd6, uint32_t ubx_dwrd7, uint32_t ubx_dwrd8, uint32_t ubx_dwrd9) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_SFRB_ID, 42);
  uint8_t _chn = ubx_chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = ubx_svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint32_t _dwrd0 = ubx_dwrd0; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd0);
  uint32_t _dwrd1 = ubx_dwrd1; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd1);
  uint32_t _dwrd2 = ubx_dwrd2; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd2);
  uint32_t _dwrd3 = ubx_dwrd3; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd3);
  uint32_t _dwrd4 = ubx_dwrd4; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd4);
  uint32_t _dwrd5 = ubx_dwrd5; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd5);
  uint32_t _dwrd6 = ubx_dwrd6; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd6);
  uint32_t _dwrd7 = ubx_dwrd7; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd7);
  uint32_t _dwrd8 = ubx_dwrd8; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd8);
  uint32_t _dwrd9 = ubx_dwrd9; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd9);
  ubx_trailer(dev);
}

#define UBX_RXM_RTCM_ID 0x32
#define UBX_RXM_RTCM_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_RXM_RTCM_flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_RXM_RTCM_reserved1(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|(uint16_t)(*((uint8_t*)_ubx_payload+1+2))<<8)
#define UBX_RXM_RTCM_refStation(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|(uint16_t)(*((uint8_t*)_ubx_payload+1+4))<<8)
#define UBX_RXM_RTCM_msgType(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|(uint16_t)(*((uint8_t*)_ubx_payload+1+6))<<8)

static inline void UbxSend_RXM_RTCM(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_flags, uint16_t ubx_reserved1, uint16_t ubx_refstation, uint16_t ubx_msgtype) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_RTCM_ID, 8);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  uint16_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 2, (uint8_t*)&_reserved1);
  uint16_t _refstation = ubx_refstation; ubx_send_bytes(dev, 2, (uint8_t*)&_refstation);
  uint16_t _msgtype = ubx_msgtype; ubx_send_bytes(dev, 2, (uint8_t*)&_msgtype);
  ubx_trailer(dev);
}

#define UBX_MON_ID 0x0A

#define UBX_MON_GET_VER_ID 0x04

static inline void UbxSend_MON_GET_VER(struct link_device *dev) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_GET_VER_ID, 0);
  ubx_trailer(dev);
}

#define UBX_MON_VER_ID 0x04
#define UBX_MON_VER_c(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+1*_ubx_block))

static inline void UbxSend_MON_VER(struct link_device *dev, uint8_t ubx_c) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_VER_ID, 1);
  uint8_t _c = ubx_c; ubx_send_bytes(dev, 1, (uint8_t*)&_c);
  ubx_trailer(dev);
}

#define UBX_MON_GET_GNSS_ID 0x28

static inline void UbxSend_MON_GET_GNSS(struct link_device *dev) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_GET_GNSS_ID, 0);
  ubx_trailer(dev);
}

#define UBX_MON_GNSS_ID 0x28
#define UBX_MON_GNSS_version(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_MON_GNSS_supported(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_MON_GNSS_defaultGnss(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_MON_GNSS_enabled(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_MON_GNSS_simultaneous(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_MON_GNSS_reserved1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_MON_GNSS_reserved2(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_MON_GNSS_reserved3(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))

static inline void UbxSend_MON_GNSS(struct link_device *dev, uint8_t ubx_version, uint8_t ubx_supported, uint8_t ubx_defaultgnss, uint8_t ubx_enabled, uint8_t ubx_simultaneous, uint8_t ubx_reserved1, uint8_t ubx_reserved2, uint8_t ubx_reserved3) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_GNSS_ID, 8);
  uint8_t _version = ubx_version; ubx_send_bytes(dev, 1, (uint8_t*)&_version);
  uint8_t _supported = ubx_supported; ubx_send_bytes(dev, 1, (uint8_t*)&_supported);
  uint8_t _defaultgnss = ubx_defaultgnss; ubx_send_bytes(dev, 1, (uint8_t*)&_defaultgnss);
  uint8_t _enabled = ubx_enabled; ubx_send_bytes(dev, 1, (uint8_t*)&_enabled);
  uint8_t _simultaneous = ubx_simultaneous; ubx_send_bytes(dev, 1, (uint8_t*)&_simultaneous);
  uint8_t _reserved1 = ubx_reserved1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved1);
  uint8_t _reserved2 = ubx_reserved2; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved2);
  uint8_t _reserved3 = ubx_reserved3; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved3);
  ubx_trailer(dev);
}
